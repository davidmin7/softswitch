#*****************************************************************************************
# Vivado (TM) v2021.2 (64-bit)
#
# create_project.tcl: Tcl script for re-creating project 'versal_pcie_switch'
#
# Generated by Vivado on Sun Nov 21 16:56:23 CST 2021
# IP Build 3369179 on Thu Oct 21 08:25:16 MDT 2021
#
# This file contains the Vivado Tcl commands for re-creating the project to the state*
# when this script was generated. In order to re-create the project, please source this
# file in the Vivado Tcl Shell.
#
# * Note that the runs in the created project will be configured the same way as the
#   original project, however they will not be launched automatically. To regenerate the
#   run results please launch the synthesis/implementation runs as needed.
#
#*****************************************************************************************
# NOTE: In order to use this script for source control purposes, please make sure that the
#       following files are added to the source control system:-
#
# 1. This project restoration tcl script (create_project.tcl) that was generated.
#
# 2. The following source(s) files that were local or imported into the original project.
#    (Please see the '$orig_proj_dir' and '$origin_dir' variable setting below at the start of the script)
#
#    <none>
#
# 3. The following remote source files that were added to the original project:-
#
#    "/home/davidmin/Projects/fpga/src/modules/cfg_flr_done.v"
#    "/home/davidmin/Projects/fpga/src/constraints/switch.xdc"
#
#*****************************************************************************************

# Check file required for this script exists
proc checkRequiredFiles { origin_dir} {
  set status true
  set files [list \
 "[file normalize "$origin_dir/src/modules/cfg_flr_done.v"]"\
 "[file normalize "$origin_dir/src/constraints/switch.xdc"]"\
  ]
  foreach ifile $files {
    if { ![file isfile $ifile] } {
      puts " Could not find remote file $ifile "
      set status false
    }
  }

  set paths [list \
 "[file normalize "$origin_dir/[file normalize "$origin_dir/ip_repo"]"]"\
  ]
  foreach ipath $paths {
    if { ![file isdirectory $ipath] } {
      puts " Could not access $ipath "
      set status false
    }
  }

  return $status
}
# Set the reference directory for source file relative paths (by default the value is script directory path)
set origin_dir "."

# Use origin directory path location variable, if specified in the tcl shell
if { [info exists ::origin_dir_loc] } {
  set origin_dir $::origin_dir_loc
}

# Set the project name
set _xil_proj_name_ "versal_pcie_switch"

# Use project name variable, if specified in the tcl shell
if { [info exists ::user_project_name] } {
  set _xil_proj_name_ $::user_project_name
}

variable script_file
set script_file "create_project.tcl"

# Help information for this script
proc print_help {} {
  variable script_file
  puts "\nDescription:"
  puts "Recreate a Vivado project from this script. The created project will be"
  puts "functionally equivalent to the original project for which this script was"
  puts "generated. The script contains commands for creating a project, filesets,"
  puts "runs, adding/importing sources and setting properties on various objects.\n"
  puts "Syntax:"
  puts "$script_file"
  puts "$script_file -tclargs \[--origin_dir <path>\]"
  puts "$script_file -tclargs \[--project_name <name>\]"
  puts "$script_file -tclargs \[--help\]\n"
  puts "Usage:"
  puts "Name                   Description"
  puts "-------------------------------------------------------------------------"
  puts "\[--origin_dir <path>\]  Determine source file paths wrt this path. Default"
  puts "                       origin_dir path value is \".\", otherwise, the value"
  puts "                       that was set with the \"-paths_relative_to\" switch"
  puts "                       when this script was generated.\n"
  puts "\[--project_name <name>\] Create project with the specified name. Default"
  puts "                       name is the name of the project from where this"
  puts "                       script was generated.\n"
  puts "\[--help\]               Print help information for this script"
  puts "-------------------------------------------------------------------------\n"
  exit 0
}

if { $::argc > 0 } {
  for {set i 0} {$i < $::argc} {incr i} {
    set option [string trim [lindex $::argv $i]]
    switch -regexp -- $option {
      "--origin_dir"   { incr i; set origin_dir [lindex $::argv $i] }
      "--project_name" { incr i; set _xil_proj_name_ [lindex $::argv $i] }
      "--help"         { print_help }
      default {
        if { [regexp {^-} $option] } {
          puts "ERROR: Unknown option '$option' specified, please type '$script_file -tclargs --help' for usage info.\n"
          return 1
        }
      }
    }
  }
}

# Set the directory path for the original project from where this script was exported
set orig_proj_dir "[file normalize "$origin_dir/versal_pcie_switch"]"

# Check for paths and files needed for project creation
set validate_required 0
if { $validate_required } {
  if { [checkRequiredFiles $origin_dir] } {
    puts "Tcl file $script_file is valid. All files required for project creation is accesable. "
  } else {
    puts "Tcl file $script_file is not valid. Not all files required for project creation is accesable. "
    return
  }
}

# Create project
create_project ${_xil_proj_name_} ./${_xil_proj_name_} -part xcvc1902-vsva2197-2MP-e-S-es1

# Set the directory path for the new project
set proj_dir [get_property directory [current_project]]

# Set project properties
set obj [current_project]
set_property -name "board_part" -value "xilinx.com:vck190_es:part0:1.3" -objects $obj
set_property -name "default_lib" -value "xil_defaultlib" -objects $obj
set_property -name "enable_vhdl_2008" -value "1" -objects $obj
set_property -name "ip_cache_permissions" -value "read write" -objects $obj
set_property -name "ip_output_repo" -value "$proj_dir/${_xil_proj_name_}.cache/ip" -objects $obj
set_property -name "mem.enable_memory_map_generation" -value "1" -objects $obj
set_property -name "platform.board_id" -value "vck190_es" -objects $obj
set_property -name "revised_directory_structure" -value "1" -objects $obj
set_property -name "sim.central_dir" -value "$proj_dir/${_xil_proj_name_}.ip_user_files" -objects $obj
set_property -name "sim.ip.auto_export_scripts" -value "1" -objects $obj
set_property -name "simulator_language" -value "Mixed" -objects $obj
set_property -name "xpm_libraries" -value "XPM_CDC XPM_FIFO XPM_MEMORY" -objects $obj

# Create 'sources_1' fileset (if not found)
if {[string equal [get_filesets -quiet sources_1] ""]} {
  create_fileset -srcset sources_1
}

# Set IP repository paths
set obj [get_filesets sources_1]
if { $obj != {} } {
   set_property "ip_repo_paths" "[file normalize "$origin_dir/ip_repo"]" $obj

   # Rebuild user ip_repo's index before adding any source files
   update_ip_catalog -rebuild
}

# Set 'sources_1' fileset object
set obj [get_filesets sources_1]
set files [list \
 [file normalize "${origin_dir}/src/modules/cfg_flr_done.v"] \
]
add_files -norecurse -fileset $obj $files

# Set 'sources_1' fileset file properties for remote files
# None

# Set 'sources_1' fileset file properties for local files
# None

# Set 'sources_1' fileset properties
set obj [get_filesets sources_1]
set_property -name "top" -value "versal_pcie_switch_wrapper" -objects $obj
set_property -name "top_auto_set" -value "0" -objects $obj

# Create 'constrs_1' fileset (if not found)
if {[string equal [get_filesets -quiet constrs_1] ""]} {
  create_fileset -constrset constrs_1
}

# Set 'constrs_1' fileset object
set obj [get_filesets constrs_1]

# Add/Import constrs file and set constrs file properties
set file "[file normalize "$origin_dir/src/constraints/switch.xdc"]"
set file_added [add_files -norecurse -fileset $obj [list $file]]
set file "$origin_dir/src/constraints/switch.xdc"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets constrs_1] [list "*$file"]]
set_property -name "file_type" -value "XDC" -objects $file_obj

# Set 'constrs_1' fileset properties
set obj [get_filesets constrs_1]

# Create 'sim_1' fileset (if not found)
if {[string equal [get_filesets -quiet sim_1] ""]} {
  create_fileset -simset sim_1
}

# Set 'sim_1' fileset object
set obj [get_filesets sim_1]
# Empty (no sources present)

# Set 'sim_1' fileset properties
set obj [get_filesets sim_1]
set_property -name "top" -value "versal_pcie_switch_wrapper" -objects $obj
set_property -name "top_lib" -value "xil_defaultlib" -objects $obj

# Set 'utils_1' fileset object
set obj [get_filesets utils_1]
# Empty (no sources present)

# Set 'utils_1' fileset properties
set obj [get_filesets utils_1]


# Adding sources referenced in BDs, if not already added
if { [get_files cfg_flr_done.v] == "" } {
  import_files -quiet -fileset sources_1 /home/davidmin/Projects/fpga/src/modules/cfg_flr_done.v
}
if { [get_files cfg_flr_done.v] == "" } {
  import_files -quiet -fileset sources_1 /home/davidmin/Projects/fpga/src/modules/cfg_flr_done.v
}


# Proc to create BD versal_pcie_switch
proc cr_bd_versal_pcie_switch { parentCell } {
# The design that will be created by this Tcl proc contains the following 
# module references:
# cfg_flr_done, cfg_flr_done



  # CHANGE DESIGN NAME HERE
  set design_name versal_pcie_switch

  common::send_gid_msg -ssname BD::TCL -id 2010 -severity "INFO" "Currently there is no design <$design_name> in project, so creating one..."

  create_bd_design $design_name

  set bCheckIPsPassed 1
  ##################################################################
  # CHECK IPs
  ##################################################################
  set bCheckIPs 1
  if { $bCheckIPs == 1 } {
     set list_check_ips "\ 
  xilinx.com:ip:pcie_versal:1.0\
  xilinx.com:ip:util_vector_logic:2.0\
  xilinx.com:ip:versal_cips:3.1\
  xilinx.com:ip:xlconstant:1.1\
  xilinx.com:ip:util_ds_buf:2.2\
  xilinx.com:ip:gt_quad_base:1.1\
  xilinx.com:ip:pcie_phy_versal:1.0\
  xilinx.com:ip:axis_clock_converter:1.1\
  user.org:user:pci_virtual_bridge:0.1\
  "

   set list_ips_missing ""
   common::send_gid_msg -ssname BD::TCL -id 2011 -severity "INFO" "Checking if the following IPs exist in the project's IP catalog: $list_check_ips ."

   foreach ip_vlnv $list_check_ips {
      set ip_obj [get_ipdefs -all $ip_vlnv]
      if { $ip_obj eq "" } {
         lappend list_ips_missing $ip_vlnv
      }
   }

   if { $list_ips_missing ne "" } {
      catch {common::send_gid_msg -ssname BD::TCL -id 2012 -severity "ERROR" "The following IPs are not found in the IP Catalog:\n  $list_ips_missing\n\nResolution: Please add the repository containing the IP(s) to the project." }
      set bCheckIPsPassed 0
   }

  }

  ##################################################################
  # CHECK Modules
  ##################################################################
  set bCheckModules 1
  if { $bCheckModules == 1 } {
     set list_check_mods "\ 
  cfg_flr_done\
  cfg_flr_done\
  "

   set list_mods_missing ""
   common::send_gid_msg -ssname BD::TCL -id 2020 -severity "INFO" "Checking if the following modules exist in the project's sources: $list_check_mods ."

   foreach mod_vlnv $list_check_mods {
      if { [can_resolve_reference $mod_vlnv] == 0 } {
         lappend list_mods_missing $mod_vlnv
      }
   }

   if { $list_mods_missing ne "" } {
      catch {common::send_gid_msg -ssname BD::TCL -id 2021 -severity "ERROR" "The following module(s) are not found in the project: $list_mods_missing" }
      common::send_gid_msg -ssname BD::TCL -id 2022 -severity "INFO" "Please add source files for the missing module(s) above."
      set bCheckIPsPassed 0
   }
}

  if { $bCheckIPsPassed != 1 } {
    common::send_gid_msg -ssname BD::TCL -id 2023 -severity "WARNING" "Will not continue with creation of design due to the error(s) above."
    return 3
  }

  
# Hierarchical cell: pcie_virtual_bridge_wrapper
proc create_hier_cell_pcie_virtual_bridge_wrapper { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_pcie_virtual_bridge_wrapper() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins
  create_bd_intf_pin -mode Master -vlnv xilinx.com:interface:axis_rtl:1.0 m_axis_down_cc

  create_bd_intf_pin -mode Master -vlnv xilinx.com:interface:axis_rtl:1.0 m_axis_down_rq

  create_bd_intf_pin -mode Master -vlnv xilinx.com:interface:axis_rtl:1.0 m_axis_up_cc

  create_bd_intf_pin -mode Master -vlnv xilinx.com:interface:axis_rtl:1.0 m_axis_up_rq

  create_bd_intf_pin -mode Slave -vlnv xilinx.com:interface:pcie3_cfg_ext_rtl:1.0 pcie_cfg_ext

  create_bd_intf_pin -mode Master -vlnv xilinx.com:interface:pcie4_cfg_mgmt_rtl:1.0 pcie_cfg_mgmt

  create_bd_intf_pin -mode Slave -vlnv xilinx.com:interface:axis_rtl:1.0 s_axis_down_cq

  create_bd_intf_pin -mode Slave -vlnv xilinx.com:interface:axis_rtl:1.0 s_axis_down_rc

  create_bd_intf_pin -mode Slave -vlnv xilinx.com:interface:axis_rtl:1.0 s_axis_up_cq

  create_bd_intf_pin -mode Slave -vlnv xilinx.com:interface:axis_rtl:1.0 s_axis_up_rc


  # Create pins
  create_bd_pin -dir I down_aclk
  create_bd_pin -dir I down_aresetn
  create_bd_pin -dir I up_aclk
  create_bd_pin -dir I up_aresetn

  # Create instance: axis_clock_converter_upstream_rc, and set properties
  set axis_clock_converter_upstream_rc [ create_bd_cell -type ip -vlnv xilinx.com:ip:axis_clock_converter:1.1 axis_clock_converter_upstream_rc ]

  # Create instance: axis_clock_converter_upstream_rq, and set properties
  set axis_clock_converter_upstream_rq [ create_bd_cell -type ip -vlnv xilinx.com:ip:axis_clock_converter:1.1 axis_clock_converter_upstream_rq ]

  # Create instance: axis_interconnect_downstream_rq, and set properties
  set axis_interconnect_downstream_rq [ create_bd_cell -type ip -vlnv xilinx.com:ip:axis_interconnect:2.1 axis_interconnect_downstream_rq ]
  set_property -dict [ list \
   CONFIG.ENABLE_ADVANCED_OPTIONS {1} \
   CONFIG.M00_HAS_REGSLICE {1} \
   CONFIG.NUM_MI {1} \
   CONFIG.S00_HAS_REGSLICE {1} \
 ] $axis_interconnect_downstream_rq

  # Create instance: axis_interconnect_upstream_cc, and set properties
  set axis_interconnect_upstream_cc [ create_bd_cell -type ip -vlnv xilinx.com:ip:axis_interconnect:2.1 axis_interconnect_upstream_cc ]
  set_property -dict [ list \
   CONFIG.ENABLE_ADVANCED_OPTIONS {1} \
   CONFIG.M00_HAS_REGSLICE {1} \
   CONFIG.NUM_MI {1} \
   CONFIG.S00_HAS_REGSLICE {1} \
 ] $axis_interconnect_upstream_cc

  # Create instance: pci_virtual_bridge_0, and set properties
  set pci_virtual_bridge_0 [ create_bd_cell -type ip -vlnv user.org:user:pci_virtual_bridge:0.1 pci_virtual_bridge_0 ]

  # Create interface connections
  connect_bd_intf_net -intf_net axis_clock_converter_upstream_rc_M_AXIS [get_bd_intf_pins axis_clock_converter_upstream_rc/M_AXIS] [get_bd_intf_pins pci_virtual_bridge_0/s_axis_up_rc]
  connect_bd_intf_net -intf_net axis_clock_converter_upstream_rq_M_AXIS [get_bd_intf_pins m_axis_up_rq] [get_bd_intf_pins axis_clock_converter_upstream_rq/M_AXIS]
  connect_bd_intf_net -intf_net axis_interconnect_downstream_rq_M00_AXIS [get_bd_intf_pins axis_interconnect_downstream_rq/M00_AXIS] [get_bd_intf_pins pci_virtual_bridge_0/s_axis_down_rq_temp]
  connect_bd_intf_net -intf_net axis_interconnect_upstream_cc_M00_AXIS [get_bd_intf_pins m_axis_up_cc] [get_bd_intf_pins axis_interconnect_upstream_cc/M00_AXIS]
  connect_bd_intf_net -intf_net pci_virtual_bridge_0_m_axis_down_cc [get_bd_intf_pins m_axis_down_cc] [get_bd_intf_pins pci_virtual_bridge_0/m_axis_down_cc]
  connect_bd_intf_net -intf_net pci_virtual_bridge_0_m_axis_down_rq [get_bd_intf_pins m_axis_down_rq] [get_bd_intf_pins pci_virtual_bridge_0/m_axis_down_rq]
  connect_bd_intf_net -intf_net pci_virtual_bridge_0_m_axis_down_rq_temp [get_bd_intf_pins axis_interconnect_downstream_rq/S00_AXIS] [get_bd_intf_pins pci_virtual_bridge_0/m_axis_down_rq_temp]
  connect_bd_intf_net -intf_net pci_virtual_bridge_0_m_axis_up_cc [get_bd_intf_pins axis_interconnect_upstream_cc/S00_AXIS] [get_bd_intf_pins pci_virtual_bridge_0/m_axis_up_cc]
  connect_bd_intf_net -intf_net pci_virtual_bridge_0_m_axis_up_rq [get_bd_intf_pins axis_clock_converter_upstream_rq/S_AXIS] [get_bd_intf_pins pci_virtual_bridge_0/m_axis_up_rq]
  connect_bd_intf_net -intf_net pci_virtual_bridge_0_pcie_cfg_mgmt [get_bd_intf_pins pcie_cfg_mgmt] [get_bd_intf_pins pci_virtual_bridge_0/pcie_cfg_mgmt]
  connect_bd_intf_net -intf_net pcie_cfg_ext_1 [get_bd_intf_pins pcie_cfg_ext] [get_bd_intf_pins pci_virtual_bridge_0/pcie_cfg_ext]
  connect_bd_intf_net -intf_net s_axis_down_cq_1 [get_bd_intf_pins s_axis_down_cq] [get_bd_intf_pins pci_virtual_bridge_0/s_axis_down_cq]
  connect_bd_intf_net -intf_net s_axis_down_rc_1 [get_bd_intf_pins s_axis_down_rc] [get_bd_intf_pins pci_virtual_bridge_0/s_axis_down_rc]
  connect_bd_intf_net -intf_net s_axis_up_cq_1 [get_bd_intf_pins s_axis_up_cq] [get_bd_intf_pins pci_virtual_bridge_0/s_axis_up_cq]
  connect_bd_intf_net -intf_net s_axis_up_rc_1 [get_bd_intf_pins s_axis_up_rc] [get_bd_intf_pins axis_clock_converter_upstream_rc/S_AXIS]

  # Create port connections
  connect_bd_net -net down_aclk_1 [get_bd_pins down_aclk] [get_bd_pins axis_clock_converter_upstream_rc/m_axis_aclk] [get_bd_pins axis_clock_converter_upstream_rq/s_axis_aclk] [get_bd_pins axis_interconnect_downstream_rq/M00_AXIS_ACLK] [get_bd_pins axis_interconnect_upstream_cc/ACLK] [get_bd_pins axis_interconnect_upstream_cc/S00_AXIS_ACLK] [get_bd_pins pci_virtual_bridge_0/down_aclk]
  connect_bd_net -net down_aresetn_1 [get_bd_pins down_aresetn] [get_bd_pins axis_clock_converter_upstream_rc/m_axis_aresetn] [get_bd_pins axis_clock_converter_upstream_rq/s_axis_aresetn] [get_bd_pins axis_interconnect_downstream_rq/M00_AXIS_ARESETN] [get_bd_pins axis_interconnect_upstream_cc/ARESETN] [get_bd_pins axis_interconnect_upstream_cc/S00_AXIS_ARESETN] [get_bd_pins pci_virtual_bridge_0/down_aresetn]
  connect_bd_net -net up_aclk_1 [get_bd_pins up_aclk] [get_bd_pins axis_clock_converter_upstream_rc/s_axis_aclk] [get_bd_pins axis_clock_converter_upstream_rq/m_axis_aclk] [get_bd_pins axis_interconnect_downstream_rq/ACLK] [get_bd_pins axis_interconnect_downstream_rq/S00_AXIS_ACLK] [get_bd_pins axis_interconnect_upstream_cc/M00_AXIS_ACLK] [get_bd_pins pci_virtual_bridge_0/up_aclk]
  connect_bd_net -net up_aresetn_1 [get_bd_pins up_aresetn] [get_bd_pins axis_clock_converter_upstream_rc/s_axis_aresetn] [get_bd_pins axis_clock_converter_upstream_rq/m_axis_aresetn] [get_bd_pins axis_interconnect_downstream_rq/ARESETN] [get_bd_pins axis_interconnect_downstream_rq/S00_AXIS_ARESETN] [get_bd_pins axis_interconnect_upstream_cc/M00_AXIS_ARESETN] [get_bd_pins pci_virtual_bridge_0/up_aresetn]

  # Restore current instance
  current_bd_instance $oldCurInst
}
  
# Hierarchical cell: pcie_versal_upstream_support
proc create_hier_cell_pcie_versal_upstream_support { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_pcie_versal_upstream_support() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins
  create_bd_intf_pin -mode Master -vlnv xilinx.com:interface:gt_rtl:1.0 pcie_mgt

  create_bd_intf_pin -mode Slave -vlnv xilinx.com:interface:diff_clock_rtl:1.0 pcie_refclk

  create_bd_intf_pin -mode Master -vlnv xilinx.com:display_phy:phy_mac_command_rtl:1.0 phy_mac_command

  create_bd_intf_pin -mode Slave -vlnv xilinx.com:display_phy:phy_mac_rx_rtl:1.0 phy_mac_rx

  create_bd_intf_pin -mode Master -vlnv xilinx.com:display_phy:phy_mac_rx_margining_rtl:1.0 phy_mac_rx_margining

  create_bd_intf_pin -mode Master -vlnv xilinx.com:display_phy:phy_mac_status_rtl:1.0 phy_mac_status

  create_bd_intf_pin -mode Slave -vlnv xilinx.com:display_phy:phy_mac_tx_rtl:1.0 phy_mac_tx

  create_bd_intf_pin -mode Master -vlnv xilinx.com:display_phy:phy_mac_tx_drive_rtl:1.0 phy_mac_tx_drive

  create_bd_intf_pin -mode Master -vlnv xilinx.com:display_phy:phy_mac_tx_eq_rtl:1.0 phy_mac_tx_eq


  # Create pins
  create_bd_pin -dir O -from 0 -to 0 -type gt_usrclk BUFG_GT_O
  create_bd_pin -dir O -from 0 -to 0 -type clk IBUF_OUT
  create_bd_pin -dir I -from 5 -to 0 pcie_ltssm_state
  create_bd_pin -dir O -type clk phy_coreclk
  create_bd_pin -dir O -type clk phy_mcapclk
  create_bd_pin -dir O -type gt_usrclk phy_pclk
  create_bd_pin -dir O -type clk phy_userclk
  create_bd_pin -dir O -type clk phy_userclk2
  create_bd_pin -dir I -type rst sys_reset

  # Create instance: bufg_gt_sysclk, and set properties
  set bufg_gt_sysclk [ create_bd_cell -type ip -vlnv xilinx.com:ip:util_ds_buf:2.2 bufg_gt_sysclk ]
  set_property -dict [ list \
   CONFIG.C_BUFG_GT_SYNC {true} \
   CONFIG.C_BUF_TYPE {BUFG_GT} \
 ] $bufg_gt_sysclk

  # Create instance: const_1b1, and set properties
  set const_1b1 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlconstant:1.1 const_1b1 ]
  set_property -dict [ list \
   CONFIG.CONST_VAL {1} \
   CONFIG.CONST_WIDTH {1} \
 ] $const_1b1

  # Create instance: gt_quad_0, and set properties
  set gt_quad_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:gt_quad_base:1.1 gt_quad_0 ]
  set_property -dict [ list \
   CONFIG.PORTS_INFO_DICT {\
     LANE_SEL_DICT {PROT0 {RX0 RX1 RX2 RX3 TX0 TX1 TX2 TX3}}\
     GT_TYPE {GTY}\
     REG_CONF_INTF {APB3_INTF}\
     BOARD_PARAMETER {}\
   } \
   CONFIG.REFCLK_STRING {\
HSCLK0_LCPLLGTREFCLK0 refclk_PROT0_R0_100_MHz_unique1 HSCLK0_RPLLGTREFCLK0\
refclk_PROT0_R0_100_MHz_unique1 HSCLK1_LCPLLGTREFCLK0\
refclk_PROT0_R0_100_MHz_unique1 HSCLK1_RPLLGTREFCLK0\
refclk_PROT0_R0_100_MHz_unique1} \
 ] $gt_quad_0

  # Create instance: pcie_phy, and set properties
  set pcie_phy [ create_bd_cell -type ip -vlnv xilinx.com:ip:pcie_phy_versal:1.0 pcie_phy ]
  set_property -dict [ list \
   CONFIG.PL_LINK_CAP_MAX_LINK_SPEED {8.0_GT/s} \
   CONFIG.PL_LINK_CAP_MAX_LINK_WIDTH {X4} \
   CONFIG.aspm {No_ASPM} \
   CONFIG.async_mode {SRNS} \
   CONFIG.disable_double_pipe {YES} \
   CONFIG.en_gt_pclk {false} \
   CONFIG.ins_loss_profile {Add-in_Card} \
   CONFIG.lane_order {Bottom} \
   CONFIG.lane_reversal {false} \
   CONFIG.phy_async_en {true} \
   CONFIG.phy_coreclk_freq {500_MHz} \
   CONFIG.phy_refclk_freq {100_MHz} \
   CONFIG.phy_userclk_freq {250_MHz} \
   CONFIG.pipeline_stages {1} \
   CONFIG.sim_model {NO} \
   CONFIG.tx_preset {4} \
 ] $pcie_phy

  # Create instance: refclk_ibuf, and set properties
  set refclk_ibuf [ create_bd_cell -type ip -vlnv xilinx.com:ip:util_ds_buf:2.2 refclk_ibuf ]
  set_property -dict [ list \
   CONFIG.C_BUF_TYPE {IBUFDSGTE} \
 ] $refclk_ibuf

  # Create interface connections
  connect_bd_intf_net -intf_net Conn1 [get_bd_intf_pins phy_mac_command] [get_bd_intf_pins pcie_phy/phy_mac_command]
  connect_bd_intf_net -intf_net Conn2 [get_bd_intf_pins phy_mac_rx] [get_bd_intf_pins pcie_phy/phy_mac_rx]
  connect_bd_intf_net -intf_net Conn3 [get_bd_intf_pins phy_mac_rx_margining] [get_bd_intf_pins pcie_phy/phy_mac_rx_margining]
  connect_bd_intf_net -intf_net Conn4 [get_bd_intf_pins phy_mac_status] [get_bd_intf_pins pcie_phy/phy_mac_status]
  connect_bd_intf_net -intf_net Conn5 [get_bd_intf_pins phy_mac_tx] [get_bd_intf_pins pcie_phy/phy_mac_tx]
  connect_bd_intf_net -intf_net Conn6 [get_bd_intf_pins phy_mac_tx_drive] [get_bd_intf_pins pcie_phy/phy_mac_tx_drive]
  connect_bd_intf_net -intf_net Conn7 [get_bd_intf_pins phy_mac_tx_eq] [get_bd_intf_pins pcie_phy/phy_mac_tx_eq]
  connect_bd_intf_net -intf_net Conn8 [get_bd_intf_pins pcie_refclk] [get_bd_intf_pins refclk_ibuf/CLK_IN_D]
  connect_bd_intf_net -intf_net Conn9 [get_bd_intf_pins pcie_mgt] [get_bd_intf_pins pcie_phy/pcie_mgt]
  connect_bd_intf_net -intf_net gt_quad_0_GT0_BUFGT [get_bd_intf_pins gt_quad_0/GT0_BUFGT] [get_bd_intf_pins pcie_phy/GT_BUFGT]
  connect_bd_intf_net -intf_net gt_quad_0_GT_Serial [get_bd_intf_pins gt_quad_0/GT_Serial] [get_bd_intf_pins pcie_phy/GT0_Serial]
  connect_bd_intf_net -intf_net pcie_phy_GT_RX0 [get_bd_intf_pins gt_quad_0/RX0_GT_IP_Interface] [get_bd_intf_pins pcie_phy/GT_RX0]
  connect_bd_intf_net -intf_net pcie_phy_GT_RX1 [get_bd_intf_pins gt_quad_0/RX1_GT_IP_Interface] [get_bd_intf_pins pcie_phy/GT_RX1]
  connect_bd_intf_net -intf_net pcie_phy_GT_RX2 [get_bd_intf_pins gt_quad_0/RX2_GT_IP_Interface] [get_bd_intf_pins pcie_phy/GT_RX2]
  connect_bd_intf_net -intf_net pcie_phy_GT_RX3 [get_bd_intf_pins gt_quad_0/RX3_GT_IP_Interface] [get_bd_intf_pins pcie_phy/GT_RX3]
  connect_bd_intf_net -intf_net pcie_phy_GT_TX0 [get_bd_intf_pins gt_quad_0/TX0_GT_IP_Interface] [get_bd_intf_pins pcie_phy/GT_TX0]
  connect_bd_intf_net -intf_net pcie_phy_GT_TX1 [get_bd_intf_pins gt_quad_0/TX1_GT_IP_Interface] [get_bd_intf_pins pcie_phy/GT_TX1]
  connect_bd_intf_net -intf_net pcie_phy_GT_TX2 [get_bd_intf_pins gt_quad_0/TX2_GT_IP_Interface] [get_bd_intf_pins pcie_phy/GT_TX2]
  connect_bd_intf_net -intf_net pcie_phy_GT_TX3 [get_bd_intf_pins gt_quad_0/TX3_GT_IP_Interface] [get_bd_intf_pins pcie_phy/GT_TX3]
  connect_bd_intf_net -intf_net pcie_phy_gt_rxmargin_q0 [get_bd_intf_pins gt_quad_0/gt_rxmargin_intf] [get_bd_intf_pins pcie_phy/gt_rxmargin_q0]

  # Create port connections
  connect_bd_net -net bufg_gt_sysclk_BUFG_GT_O [get_bd_pins BUFG_GT_O] [get_bd_pins bufg_gt_sysclk/BUFG_GT_O] [get_bd_pins gt_quad_0/apb3clk] [get_bd_pins pcie_phy/phy_refclk]
  connect_bd_net -net const_1b1_dout [get_bd_pins bufg_gt_sysclk/BUFG_GT_CE] [get_bd_pins const_1b1/dout]
  connect_bd_net -net gt_quad_0_ch0_phyready [get_bd_pins gt_quad_0/ch0_phyready] [get_bd_pins pcie_phy/ch0_phyready]
  connect_bd_net -net gt_quad_0_ch0_phystatus [get_bd_pins gt_quad_0/ch0_phystatus] [get_bd_pins pcie_phy/ch0_phystatus]
  connect_bd_net -net gt_quad_0_ch0_rxoutclk [get_bd_pins gt_quad_0/ch0_rxoutclk] [get_bd_pins pcie_phy/gt_rxoutclk]
  connect_bd_net -net gt_quad_0_ch0_txoutclk [get_bd_pins gt_quad_0/ch0_txoutclk] [get_bd_pins pcie_phy/gt_txoutclk]
  connect_bd_net -net gt_quad_0_ch1_phyready [get_bd_pins gt_quad_0/ch1_phyready] [get_bd_pins pcie_phy/ch1_phyready]
  connect_bd_net -net gt_quad_0_ch1_phystatus [get_bd_pins gt_quad_0/ch1_phystatus] [get_bd_pins pcie_phy/ch1_phystatus]
  connect_bd_net -net gt_quad_0_ch2_phyready [get_bd_pins gt_quad_0/ch2_phyready] [get_bd_pins pcie_phy/ch2_phyready]
  connect_bd_net -net gt_quad_0_ch2_phystatus [get_bd_pins gt_quad_0/ch2_phystatus] [get_bd_pins pcie_phy/ch2_phystatus]
  connect_bd_net -net gt_quad_0_ch3_phyready [get_bd_pins gt_quad_0/ch3_phyready] [get_bd_pins pcie_phy/ch3_phyready]
  connect_bd_net -net gt_quad_0_ch3_phystatus [get_bd_pins gt_quad_0/ch3_phystatus] [get_bd_pins pcie_phy/ch3_phystatus]
  connect_bd_net -net pcie_ltssm_state_1 [get_bd_pins pcie_ltssm_state] [get_bd_pins pcie_phy/pcie_ltssm_state]
  connect_bd_net -net pcie_phy_gt_pcieltssm [get_bd_pins gt_quad_0/pcieltssm] [get_bd_pins pcie_phy/gt_pcieltssm]
  connect_bd_net -net pcie_phy_gtrefclk [get_bd_pins gt_quad_0/GT_REFCLK0] [get_bd_pins pcie_phy/gtrefclk]
  connect_bd_net -net pcie_phy_pcierstb [get_bd_pins gt_quad_0/ch0_pcierstb] [get_bd_pins gt_quad_0/ch1_pcierstb] [get_bd_pins gt_quad_0/ch2_pcierstb] [get_bd_pins gt_quad_0/ch3_pcierstb] [get_bd_pins pcie_phy/pcierstb]
  connect_bd_net -net pcie_phy_phy_coreclk [get_bd_pins phy_coreclk] [get_bd_pins pcie_phy/phy_coreclk]
  connect_bd_net -net pcie_phy_phy_mcapclk [get_bd_pins phy_mcapclk] [get_bd_pins pcie_phy/phy_mcapclk]
  connect_bd_net -net pcie_phy_phy_pclk [get_bd_pins phy_pclk] [get_bd_pins gt_quad_0/ch0_rxusrclk] [get_bd_pins gt_quad_0/ch0_txusrclk] [get_bd_pins gt_quad_0/ch1_rxusrclk] [get_bd_pins gt_quad_0/ch1_txusrclk] [get_bd_pins gt_quad_0/ch2_rxusrclk] [get_bd_pins gt_quad_0/ch2_txusrclk] [get_bd_pins gt_quad_0/ch3_rxusrclk] [get_bd_pins gt_quad_0/ch3_txusrclk] [get_bd_pins pcie_phy/phy_pclk]
  connect_bd_net -net pcie_phy_phy_userclk [get_bd_pins phy_userclk] [get_bd_pins pcie_phy/phy_userclk]
  connect_bd_net -net pcie_phy_phy_userclk2 [get_bd_pins phy_userclk2] [get_bd_pins pcie_phy/phy_userclk2]
  connect_bd_net -net refclk_ibuf_IBUF_DS_ODIV2 [get_bd_pins bufg_gt_sysclk/BUFG_GT_I] [get_bd_pins refclk_ibuf/IBUF_DS_ODIV2]
  connect_bd_net -net refclk_ibuf_IBUF_OUT [get_bd_pins IBUF_OUT] [get_bd_pins pcie_phy/phy_gtrefclk] [get_bd_pins refclk_ibuf/IBUF_OUT]
  connect_bd_net -net sys_reset_1 [get_bd_pins sys_reset] [get_bd_pins pcie_phy/phy_rst_n]

  # Restore current instance
  current_bd_instance $oldCurInst
}
  
# Hierarchical cell: pcie_versal_downstream_support
proc create_hier_cell_pcie_versal_downstream_support { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_pcie_versal_downstream_support() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins
  create_bd_intf_pin -mode Master -vlnv xilinx.com:interface:gt_rtl:1.0 pcie_mgt

  create_bd_intf_pin -mode Slave -vlnv xilinx.com:interface:diff_clock_rtl:1.0 pcie_refclk

  create_bd_intf_pin -mode Master -vlnv xilinx.com:display_phy:phy_mac_command_rtl:1.0 phy_mac_command

  create_bd_intf_pin -mode Slave -vlnv xilinx.com:display_phy:phy_mac_rx_rtl:1.0 phy_mac_rx

  create_bd_intf_pin -mode Master -vlnv xilinx.com:display_phy:phy_mac_rx_margining_rtl:1.0 phy_mac_rx_margining

  create_bd_intf_pin -mode Master -vlnv xilinx.com:display_phy:phy_mac_status_rtl:1.0 phy_mac_status

  create_bd_intf_pin -mode Slave -vlnv xilinx.com:display_phy:phy_mac_tx_rtl:1.0 phy_mac_tx

  create_bd_intf_pin -mode Master -vlnv xilinx.com:display_phy:phy_mac_tx_drive_rtl:1.0 phy_mac_tx_drive

  create_bd_intf_pin -mode Master -vlnv xilinx.com:display_phy:phy_mac_tx_eq_rtl:1.0 phy_mac_tx_eq


  # Create pins
  create_bd_pin -dir O -from 0 -to 0 -type gt_usrclk BUFG_GT_O
  create_bd_pin -dir O -from 0 -to 0 -type clk IBUF_OUT
  create_bd_pin -dir I -from 5 -to 0 pcie_ltssm_state
  create_bd_pin -dir O -type clk phy_coreclk
  create_bd_pin -dir O -type clk phy_mcapclk
  create_bd_pin -dir O -type gt_usrclk phy_pclk
  create_bd_pin -dir O -type clk phy_userclk
  create_bd_pin -dir O -type clk phy_userclk2
  create_bd_pin -dir I -type rst sys_reset

  # Create instance: bufg_gt_sysclk, and set properties
  set bufg_gt_sysclk [ create_bd_cell -type ip -vlnv xilinx.com:ip:util_ds_buf:2.2 bufg_gt_sysclk ]
  set_property -dict [ list \
   CONFIG.C_BUFG_GT_SYNC {true} \
   CONFIG.C_BUF_TYPE {BUFG_GT} \
 ] $bufg_gt_sysclk

  # Create instance: const_1b1, and set properties
  set const_1b1 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlconstant:1.1 const_1b1 ]
  set_property -dict [ list \
   CONFIG.CONST_VAL {1} \
   CONFIG.CONST_WIDTH {1} \
 ] $const_1b1

  # Create instance: gt_quad_0, and set properties
  set gt_quad_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:gt_quad_base:1.1 gt_quad_0 ]
  set_property -dict [ list \
   CONFIG.PORTS_INFO_DICT {\
     LANE_SEL_DICT {PROT0 {RX0 RX1 RX2 RX3 TX0 TX1 TX2 TX3}}\
     GT_TYPE {GTY}\
     REG_CONF_INTF {APB3_INTF}\
     BOARD_PARAMETER {}\
   } \
   CONFIG.REFCLK_STRING {\
HSCLK0_LCPLLGTREFCLK0 refclk_PROT0_R0_100_MHz_unique1 HSCLK0_RPLLGTREFCLK0\
refclk_PROT0_R0_100_MHz_unique1 HSCLK1_LCPLLGTREFCLK0\
refclk_PROT0_R0_100_MHz_unique1 HSCLK1_RPLLGTREFCLK0\
refclk_PROT0_R0_100_MHz_unique1} \
 ] $gt_quad_0

  # Create instance: pcie_phy, and set properties
  set pcie_phy [ create_bd_cell -type ip -vlnv xilinx.com:ip:pcie_phy_versal:1.0 pcie_phy ]
  set_property -dict [ list \
   CONFIG.PL_LINK_CAP_MAX_LINK_SPEED {8.0_GT/s} \
   CONFIG.PL_LINK_CAP_MAX_LINK_WIDTH {X4} \
   CONFIG.aspm {No_ASPM} \
   CONFIG.async_mode {SRNS} \
   CONFIG.disable_double_pipe {YES} \
   CONFIG.en_gt_pclk {false} \
   CONFIG.ins_loss_profile {Add-in_Card} \
   CONFIG.lane_order {Bottom} \
   CONFIG.lane_reversal {false} \
   CONFIG.phy_async_en {true} \
   CONFIG.phy_coreclk_freq {500_MHz} \
   CONFIG.phy_refclk_freq {100_MHz} \
   CONFIG.phy_userclk_freq {250_MHz} \
   CONFIG.pipeline_stages {1} \
   CONFIG.sim_model {NO} \
   CONFIG.tx_preset {4} \
 ] $pcie_phy

  # Create instance: refclk_ibuf, and set properties
  set refclk_ibuf [ create_bd_cell -type ip -vlnv xilinx.com:ip:util_ds_buf:2.2 refclk_ibuf ]
  set_property -dict [ list \
   CONFIG.C_BUF_TYPE {IBUFDSGTE} \
 ] $refclk_ibuf

  # Create interface connections
  connect_bd_intf_net -intf_net Conn1 [get_bd_intf_pins phy_mac_command] [get_bd_intf_pins pcie_phy/phy_mac_command]
  connect_bd_intf_net -intf_net Conn2 [get_bd_intf_pins phy_mac_rx] [get_bd_intf_pins pcie_phy/phy_mac_rx]
  connect_bd_intf_net -intf_net Conn3 [get_bd_intf_pins phy_mac_rx_margining] [get_bd_intf_pins pcie_phy/phy_mac_rx_margining]
  connect_bd_intf_net -intf_net Conn4 [get_bd_intf_pins phy_mac_status] [get_bd_intf_pins pcie_phy/phy_mac_status]
  connect_bd_intf_net -intf_net Conn5 [get_bd_intf_pins phy_mac_tx] [get_bd_intf_pins pcie_phy/phy_mac_tx]
  connect_bd_intf_net -intf_net Conn6 [get_bd_intf_pins phy_mac_tx_drive] [get_bd_intf_pins pcie_phy/phy_mac_tx_drive]
  connect_bd_intf_net -intf_net Conn7 [get_bd_intf_pins phy_mac_tx_eq] [get_bd_intf_pins pcie_phy/phy_mac_tx_eq]
  connect_bd_intf_net -intf_net Conn8 [get_bd_intf_pins pcie_refclk] [get_bd_intf_pins refclk_ibuf/CLK_IN_D]
  connect_bd_intf_net -intf_net Conn9 [get_bd_intf_pins pcie_mgt] [get_bd_intf_pins pcie_phy/pcie_mgt]
  connect_bd_intf_net -intf_net gt_quad_0_GT0_BUFGT [get_bd_intf_pins gt_quad_0/GT0_BUFGT] [get_bd_intf_pins pcie_phy/GT_BUFGT]
  connect_bd_intf_net -intf_net gt_quad_0_GT_Serial [get_bd_intf_pins gt_quad_0/GT_Serial] [get_bd_intf_pins pcie_phy/GT0_Serial]
  connect_bd_intf_net -intf_net pcie_phy_GT_RX0 [get_bd_intf_pins gt_quad_0/RX0_GT_IP_Interface] [get_bd_intf_pins pcie_phy/GT_RX0]
  connect_bd_intf_net -intf_net pcie_phy_GT_RX1 [get_bd_intf_pins gt_quad_0/RX1_GT_IP_Interface] [get_bd_intf_pins pcie_phy/GT_RX1]
  connect_bd_intf_net -intf_net pcie_phy_GT_RX2 [get_bd_intf_pins gt_quad_0/RX2_GT_IP_Interface] [get_bd_intf_pins pcie_phy/GT_RX2]
  connect_bd_intf_net -intf_net pcie_phy_GT_RX3 [get_bd_intf_pins gt_quad_0/RX3_GT_IP_Interface] [get_bd_intf_pins pcie_phy/GT_RX3]
  connect_bd_intf_net -intf_net pcie_phy_GT_TX0 [get_bd_intf_pins gt_quad_0/TX0_GT_IP_Interface] [get_bd_intf_pins pcie_phy/GT_TX0]
  connect_bd_intf_net -intf_net pcie_phy_GT_TX1 [get_bd_intf_pins gt_quad_0/TX1_GT_IP_Interface] [get_bd_intf_pins pcie_phy/GT_TX1]
  connect_bd_intf_net -intf_net pcie_phy_GT_TX2 [get_bd_intf_pins gt_quad_0/TX2_GT_IP_Interface] [get_bd_intf_pins pcie_phy/GT_TX2]
  connect_bd_intf_net -intf_net pcie_phy_GT_TX3 [get_bd_intf_pins gt_quad_0/TX3_GT_IP_Interface] [get_bd_intf_pins pcie_phy/GT_TX3]
  connect_bd_intf_net -intf_net pcie_phy_gt_rxmargin_q0 [get_bd_intf_pins gt_quad_0/gt_rxmargin_intf] [get_bd_intf_pins pcie_phy/gt_rxmargin_q0]

  # Create port connections
  connect_bd_net -net bufg_gt_sysclk_BUFG_GT_O [get_bd_pins BUFG_GT_O] [get_bd_pins bufg_gt_sysclk/BUFG_GT_O] [get_bd_pins gt_quad_0/apb3clk] [get_bd_pins pcie_phy/phy_refclk]
  connect_bd_net -net const_1b1_dout [get_bd_pins bufg_gt_sysclk/BUFG_GT_CE] [get_bd_pins const_1b1/dout]
  connect_bd_net -net gt_quad_0_ch0_phyready [get_bd_pins gt_quad_0/ch0_phyready] [get_bd_pins pcie_phy/ch0_phyready]
  connect_bd_net -net gt_quad_0_ch0_phystatus [get_bd_pins gt_quad_0/ch0_phystatus] [get_bd_pins pcie_phy/ch0_phystatus]
  connect_bd_net -net gt_quad_0_ch0_rxoutclk [get_bd_pins gt_quad_0/ch0_rxoutclk] [get_bd_pins pcie_phy/gt_rxoutclk]
  connect_bd_net -net gt_quad_0_ch0_txoutclk [get_bd_pins gt_quad_0/ch0_txoutclk] [get_bd_pins pcie_phy/gt_txoutclk]
  connect_bd_net -net gt_quad_0_ch1_phyready [get_bd_pins gt_quad_0/ch1_phyready] [get_bd_pins pcie_phy/ch1_phyready]
  connect_bd_net -net gt_quad_0_ch1_phystatus [get_bd_pins gt_quad_0/ch1_phystatus] [get_bd_pins pcie_phy/ch1_phystatus]
  connect_bd_net -net gt_quad_0_ch2_phyready [get_bd_pins gt_quad_0/ch2_phyready] [get_bd_pins pcie_phy/ch2_phyready]
  connect_bd_net -net gt_quad_0_ch2_phystatus [get_bd_pins gt_quad_0/ch2_phystatus] [get_bd_pins pcie_phy/ch2_phystatus]
  connect_bd_net -net gt_quad_0_ch3_phyready [get_bd_pins gt_quad_0/ch3_phyready] [get_bd_pins pcie_phy/ch3_phyready]
  connect_bd_net -net gt_quad_0_ch3_phystatus [get_bd_pins gt_quad_0/ch3_phystatus] [get_bd_pins pcie_phy/ch3_phystatus]
  connect_bd_net -net pcie_ltssm_state_1 [get_bd_pins pcie_ltssm_state] [get_bd_pins pcie_phy/pcie_ltssm_state]
  connect_bd_net -net pcie_phy_gt_pcieltssm [get_bd_pins gt_quad_0/pcieltssm] [get_bd_pins pcie_phy/gt_pcieltssm]
  connect_bd_net -net pcie_phy_gtrefclk [get_bd_pins gt_quad_0/GT_REFCLK0] [get_bd_pins pcie_phy/gtrefclk]
  connect_bd_net -net pcie_phy_pcierstb [get_bd_pins gt_quad_0/ch0_pcierstb] [get_bd_pins gt_quad_0/ch1_pcierstb] [get_bd_pins gt_quad_0/ch2_pcierstb] [get_bd_pins gt_quad_0/ch3_pcierstb] [get_bd_pins pcie_phy/pcierstb]
  connect_bd_net -net pcie_phy_phy_coreclk [get_bd_pins phy_coreclk] [get_bd_pins pcie_phy/phy_coreclk]
  connect_bd_net -net pcie_phy_phy_mcapclk [get_bd_pins phy_mcapclk] [get_bd_pins pcie_phy/phy_mcapclk]
  connect_bd_net -net pcie_phy_phy_pclk [get_bd_pins phy_pclk] [get_bd_pins gt_quad_0/ch0_rxusrclk] [get_bd_pins gt_quad_0/ch0_txusrclk] [get_bd_pins gt_quad_0/ch1_rxusrclk] [get_bd_pins gt_quad_0/ch1_txusrclk] [get_bd_pins gt_quad_0/ch2_rxusrclk] [get_bd_pins gt_quad_0/ch2_txusrclk] [get_bd_pins gt_quad_0/ch3_rxusrclk] [get_bd_pins gt_quad_0/ch3_txusrclk] [get_bd_pins pcie_phy/phy_pclk]
  connect_bd_net -net pcie_phy_phy_userclk [get_bd_pins phy_userclk] [get_bd_pins pcie_phy/phy_userclk]
  connect_bd_net -net pcie_phy_phy_userclk2 [get_bd_pins phy_userclk2] [get_bd_pins pcie_phy/phy_userclk2]
  connect_bd_net -net refclk_ibuf_IBUF_DS_ODIV2 [get_bd_pins bufg_gt_sysclk/BUFG_GT_I] [get_bd_pins refclk_ibuf/IBUF_DS_ODIV2]
  connect_bd_net -net refclk_ibuf_IBUF_OUT [get_bd_pins IBUF_OUT] [get_bd_pins pcie_phy/phy_gtrefclk] [get_bd_pins refclk_ibuf/IBUF_OUT]
  connect_bd_net -net sys_reset_1 [get_bd_pins sys_reset] [get_bd_pins pcie_phy/phy_rst_n]

  # Restore current instance
  current_bd_instance $oldCurInst
}
  variable script_folder

  if { $parentCell eq "" } {
     set parentCell [get_bd_cells /]
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj


  # Create interface ports
  set pcie_downstream_mgt [ create_bd_intf_port -mode Master -vlnv xilinx.com:interface:gt_rtl:1.0 pcie_downstream_mgt ]

  set pcie_downstream_refclk [ create_bd_intf_port -mode Slave -vlnv xilinx.com:interface:diff_clock_rtl:1.0 pcie_downstream_refclk ]

  set pcie_upstream_mgt [ create_bd_intf_port -mode Master -vlnv xilinx.com:interface:gt_rtl:1.0 pcie_upstream_mgt ]

  set pcie_upstream_refclk [ create_bd_intf_port -mode Slave -vlnv xilinx.com:interface:diff_clock_rtl:1.0 pcie_upstream_refclk ]


  # Create ports
  set sys_reset [ create_bd_port -dir I -type rst sys_reset ]
  set_property -dict [ list \
   CONFIG.POLARITY {ACTIVE_HIGH} \
 ] $sys_reset

  # Create instance: cfg_flr_done_downstream, and set properties
  set block_name cfg_flr_done
  set block_cell_name cfg_flr_done_downstream
  if { [catch {set cfg_flr_done_downstream [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $cfg_flr_done_downstream eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  set_property -dict [ list \
   CONFIG.POLARITY {ACTIVE_HIGH} \
 ] [get_bd_pins /cfg_flr_done_downstream/user_reset]

  # Create instance: cfg_flr_done_upstream, and set properties
  set block_name cfg_flr_done
  set block_cell_name cfg_flr_done_upstream
  if { [catch {set cfg_flr_done_upstream [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $cfg_flr_done_upstream eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  set_property -dict [ list \
   CONFIG.POLARITY {ACTIVE_HIGH} \
 ] [get_bd_pins /cfg_flr_done_upstream/user_reset]

  # Create instance: pcie_versal_downstream, and set properties
  set pcie_versal_downstream [ create_bd_cell -type ip -vlnv xilinx.com:ip:pcie_versal:1.0 pcie_versal_downstream ]
  set_property -dict [ list \
   CONFIG.AXISTEN_IF_EXT_512_RQ_STRADDLE {false} \
   CONFIG.AXISTEN_IF_RC_STRADDLE {false} \
   CONFIG.PF0_CLASS_CODE {060400} \
   CONFIG.PF0_DEVICE_ID {B034} \
   CONFIG.PF0_INTERRUPT_PIN {INTA} \
   CONFIG.PF0_MSI_CAP_MULTIMSGCAP {8_vectors} \
   CONFIG.PF0_SRIOV_VF_DEVICE_ID {C034} \
   CONFIG.PF0_Use_Class_Code_Lookup_Assistant {true} \
   CONFIG.PF1_SRIOV_VF_DEVICE_ID {C134} \
   CONFIG.PF2_DEVICE_ID {B234} \
   CONFIG.PF2_SRIOV_VF_DEVICE_ID {C234} \
   CONFIG.PF3_DEVICE_ID {B334} \
   CONFIG.PF3_SRIOV_VF_DEVICE_ID {C334} \
   CONFIG.PF4_DEVICE_ID {B434} \
   CONFIG.PF4_SRIOV_VF_DEVICE_ID {C434} \
   CONFIG.PF5_DEVICE_ID {B534} \
   CONFIG.PF5_SRIOV_VF_DEVICE_ID {C534} \
   CONFIG.PF6_DEVICE_ID {B634} \
   CONFIG.PF6_SRIOV_VF_DEVICE_ID {C634} \
   CONFIG.PF7_DEVICE_ID {B734} \
   CONFIG.PF7_SRIOV_VF_DEVICE_ID {C734} \
   CONFIG.PL_LINK_CAP_MAX_LINK_SPEED {8.0_GT/s} \
   CONFIG.PL_LINK_CAP_MAX_LINK_WIDTH {X4} \
   CONFIG.axisten_freq {250} \
   CONFIG.axisten_if_enable_client_tag {true} \
   CONFIG.axisten_if_enable_rx_msg_intfc {false} \
   CONFIG.axisten_if_width {128_bit} \
   CONFIG.device_port_type {Switch_Port_Downstream} \
   CONFIG.en_msi_per_vec_masking {true} \
   CONFIG.mode_selection {Advanced} \
   CONFIG.pf0_bar0_enabled {false} \
   CONFIG.pf0_bar0_type {N/A} \
   CONFIG.pf0_base_class_menu {Bridge_device} \
   CONFIG.pf0_class_code_base {06} \
   CONFIG.pf0_class_code_sub {04} \
   CONFIG.pf0_dev_cap_max_payload {128_bytes} \
   CONFIG.pf0_dll_feature_cap_enabled {false} \
   CONFIG.pf0_margining_cap_enabled {false} \
   CONFIG.pf0_pl16_cap_enabled {false} \
   CONFIG.pf0_sub_class_interface_menu {PCI_to_PCI_bridge} \
   CONFIG.pf1_bar0_enabled {false} \
   CONFIG.pf1_bar0_type {N/A} \
   CONFIG.pf2_bar0_enabled {false} \
   CONFIG.pf2_bar0_type {N/A} \
   CONFIG.pf3_bar0_enabled {false} \
   CONFIG.pf3_bar0_type {N/A} \
   CONFIG.pf4_bar0_enabled {false} \
   CONFIG.pf4_bar0_type {N/A} \
   CONFIG.pf5_bar0_enabled {false} \
   CONFIG.pf5_bar0_type {N/A} \
   CONFIG.pf6_bar0_enabled {false} \
   CONFIG.pf6_bar0_type {N/A} \
   CONFIG.pf7_bar0_enabled {false} \
   CONFIG.pf7_bar0_type {N/A} \
   CONFIG.two_port_switch {true} \
   CONFIG.type1_membase_memlimit_enable {Enabled} \
   CONFIG.type1_prefetchable_membase_memlimit {64bit_Enabled} \
 ] $pcie_versal_downstream

  # Create instance: pcie_versal_downstream_support
  create_hier_cell_pcie_versal_downstream_support [current_bd_instance .] pcie_versal_downstream_support

  # Create instance: pcie_versal_upstream, and set properties
  set pcie_versal_upstream [ create_bd_cell -type ip -vlnv xilinx.com:ip:pcie_versal:1.0 pcie_versal_upstream ]
  set_property -dict [ list \
   CONFIG.AXISTEN_IF_EXT_512_RQ_STRADDLE {false} \
   CONFIG.AXISTEN_IF_RC_STRADDLE {false} \
   CONFIG.PF0_CLASS_CODE {060400} \
   CONFIG.PF0_DEVICE_ID {B034} \
   CONFIG.PF0_INTERRUPT_PIN {INTA} \
   CONFIG.PF0_MSI_CAP_MULTIMSGCAP {8_vectors} \
   CONFIG.PF0_SRIOV_VF_DEVICE_ID {C034} \
   CONFIG.PF0_Use_Class_Code_Lookup_Assistant {true} \
   CONFIG.PF1_SRIOV_VF_DEVICE_ID {C134} \
   CONFIG.PF2_DEVICE_ID {B234} \
   CONFIG.PF2_SRIOV_VF_DEVICE_ID {C234} \
   CONFIG.PF3_DEVICE_ID {B334} \
   CONFIG.PF3_SRIOV_VF_DEVICE_ID {C334} \
   CONFIG.PF4_DEVICE_ID {B434} \
   CONFIG.PF4_SRIOV_VF_DEVICE_ID {C434} \
   CONFIG.PF5_DEVICE_ID {B534} \
   CONFIG.PF5_SRIOV_VF_DEVICE_ID {C534} \
   CONFIG.PF6_DEVICE_ID {B634} \
   CONFIG.PF6_SRIOV_VF_DEVICE_ID {C634} \
   CONFIG.PF7_DEVICE_ID {B734} \
   CONFIG.PF7_SRIOV_VF_DEVICE_ID {C734} \
   CONFIG.PL_LINK_CAP_MAX_LINK_SPEED {8.0_GT/s} \
   CONFIG.PL_LINK_CAP_MAX_LINK_WIDTH {X4} \
   CONFIG.axisten_freq {250} \
   CONFIG.axisten_if_enable_client_tag {true} \
   CONFIG.axisten_if_enable_rx_msg_intfc {false} \
   CONFIG.axisten_if_width {128_bit} \
   CONFIG.device_port_type {Switch_Port_Upstream} \
   CONFIG.en_msi_per_vec_masking {true} \
   CONFIG.ext_pcie_cfg_space_enabled {true} \
   CONFIG.legacy_ext_pcie_cfg_space_enabled {true} \
   CONFIG.mode_selection {Advanced} \
   CONFIG.pcie_blk_locn {X0Y1} \
   CONFIG.pf0_bar0_enabled {false} \
   CONFIG.pf0_bar0_type {N/A} \
   CONFIG.pf0_base_class_menu {Bridge_device} \
   CONFIG.pf0_class_code_base {06} \
   CONFIG.pf0_class_code_sub {04} \
   CONFIG.pf0_dev_cap_max_payload {128_bytes} \
   CONFIG.pf0_dll_feature_cap_enabled {false} \
   CONFIG.pf0_margining_cap_enabled {false} \
   CONFIG.pf0_pl16_cap_enabled {false} \
   CONFIG.pf0_sub_class_interface_menu {PCI_to_PCI_bridge} \
   CONFIG.pf1_bar0_enabled {false} \
   CONFIG.pf1_bar0_type {N/A} \
   CONFIG.pf2_bar0_enabled {false} \
   CONFIG.pf2_bar0_type {N/A} \
   CONFIG.pf3_bar0_enabled {false} \
   CONFIG.pf3_bar0_type {N/A} \
   CONFIG.pf4_bar0_enabled {false} \
   CONFIG.pf4_bar0_type {N/A} \
   CONFIG.pf5_bar0_enabled {false} \
   CONFIG.pf5_bar0_type {N/A} \
   CONFIG.pf6_bar0_enabled {false} \
   CONFIG.pf6_bar0_type {N/A} \
   CONFIG.pf7_bar0_enabled {false} \
   CONFIG.pf7_bar0_type {N/A} \
   CONFIG.two_port_switch {true} \
   CONFIG.type1_membase_memlimit_enable {Enabled} \
   CONFIG.type1_prefetchable_membase_memlimit {64bit_Enabled} \
 ] $pcie_versal_upstream

  # Create instance: pcie_versal_upstream_support
  create_hier_cell_pcie_versal_upstream_support [current_bd_instance .] pcie_versal_upstream_support

  # Create instance: pcie_virtual_bridge_wrapper
  create_hier_cell_pcie_virtual_bridge_wrapper [current_bd_instance .] pcie_virtual_bridge_wrapper

  # Create instance: util_vector_logic_downstream_reset, and set properties
  set util_vector_logic_downstream_reset [ create_bd_cell -type ip -vlnv xilinx.com:ip:util_vector_logic:2.0 util_vector_logic_downstream_reset ]
  set_property -dict [ list \
   CONFIG.C_OPERATION {not} \
   CONFIG.C_SIZE {1} \
   CONFIG.LOGO_FILE {data/sym_notgate.png} \
 ] $util_vector_logic_downstream_reset

  # Create instance: util_vector_logic_sys_reset, and set properties
  set util_vector_logic_sys_reset [ create_bd_cell -type ip -vlnv xilinx.com:ip:util_vector_logic:2.0 util_vector_logic_sys_reset ]
  set_property -dict [ list \
   CONFIG.C_OPERATION {not} \
   CONFIG.C_SIZE {1} \
   CONFIG.LOGO_FILE {data/sym_notgate.png} \
 ] $util_vector_logic_sys_reset

  # Create instance: util_vector_logic_upstream_reset, and set properties
  set util_vector_logic_upstream_reset [ create_bd_cell -type ip -vlnv xilinx.com:ip:util_vector_logic:2.0 util_vector_logic_upstream_reset ]
  set_property -dict [ list \
   CONFIG.C_OPERATION {not} \
   CONFIG.C_SIZE {1} \
   CONFIG.LOGO_FILE {data/sym_notgate.png} \
 ] $util_vector_logic_upstream_reset

  # Create instance: versal_cips_0, and set properties
  set versal_cips_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:versal_cips:3.1 versal_cips_0 ]
  set_property -dict [ list \
   CONFIG.DDR_MEMORY_MODE {Custom} \
   CONFIG.DEBUG_MODE {JTAG} \
   CONFIG.DESIGN_MODE {1} \
   CONFIG.PS_BOARD_INTERFACE {ps_pmc_fixed_io} \
   CONFIG.PS_PMC_CONFIG {\
     DEBUG_MODE {JTAG}\
     DESIGN_MODE {1}\
     PMC_GPIO0_MIO_PERIPHERAL {{ENABLE 1} {IO {PMC_MIO 0 .. 25}}}\
     PMC_GPIO1_MIO_PERIPHERAL {{ENABLE 1} {IO {PMC_MIO 26 .. 51}}}\
     PMC_I2CPMC_PERIPHERAL {{ENABLE 1} {IO {PMC_MIO 46 .. 47}}}\
     PMC_MIO37 {{AUX_IO 0} {DIRECTION out} {DRIVE_STRENGTH 8mA} {OUTPUT_DATA high}\
{PULL pullup} {SCHMITT 0} {SLEW slow} {USAGE GPIO}}\
     PMC_MIO_EN_FOR_PL_PCIE {1}\
     PMC_OSPI_PERIPHERAL {{ENABLE 0} {IO {PMC_MIO 0 .. 11}} {MODE Single}}\
     PMC_QSPI_COHERENCY {0}\
     PMC_QSPI_FBCLK {{ENABLE 1} {IO {PMC_MIO 6}}}\
     PMC_QSPI_PERIPHERAL_DATA_MODE {x4}\
     PMC_QSPI_PERIPHERAL_ENABLE {1}\
     PMC_QSPI_PERIPHERAL_MODE {Dual Parallel}\
     PMC_REF_CLK_FREQMHZ {33.3333}\
     PMC_SD1 {{CD_ENABLE 1} {CD_IO {PMC_MIO 28}} {POW_ENABLE 1} {POW_IO {PMC_MIO 51}}\
{RESET_ENABLE 0} {RESET_IO {PMC_MIO 12}} {WP_ENABLE 0} {WP_IO {PMC_MIO\
1}}}\
     PMC_SD1_COHERENCY {0}\
     PMC_SD1_DATA_TRANSFER_MODE {8Bit}\
     PMC_SD1_PERIPHERAL {{ENABLE 1} {IO {PMC_MIO 26 .. 36}}}\
     PMC_SD1_SLOT_TYPE {SD 3.0}\
     PS_BOARD_INTERFACE {ps_pmc_fixed_io}\
     PS_CAN1_PERIPHERAL {{ENABLE 1} {IO {PMC_MIO 40 .. 41}}}\
     PS_ENET0_MDIO {{ENABLE 1} {IO {PS_MIO 24 .. 25}}}\
     PS_ENET0_PERIPHERAL {{ENABLE 1} {IO {PS_MIO 0 .. 11}}}\
     PS_ENET1_PERIPHERAL {{ENABLE 1} {IO {PS_MIO 12 .. 23}}}\
     PS_GEN_IPI0_ENABLE {1}\
     PS_GEN_IPI0_MASTER {A72}\
     PS_GEN_IPI1_ENABLE {1}\
     PS_GEN_IPI2_ENABLE {1}\
     PS_GEN_IPI3_ENABLE {1}\
     PS_GEN_IPI4_ENABLE {1}\
     PS_GEN_IPI5_ENABLE {1}\
     PS_GEN_IPI6_ENABLE {1}\
     PS_HSDP_EGRESS_TRAFFIC {JTAG}\
     PS_HSDP_INGRESS_TRAFFIC {JTAG}\
     PS_HSDP_MODE {None}\
     PS_I2C1_PERIPHERAL {{ENABLE 1} {IO {PMC_MIO 44 .. 45}}}\
     PS_MIO19 {{AUX_IO 0} {DIRECTION in} {DRIVE_STRENGTH 8mA} {OUTPUT_DATA default}\
{PULL disable} {SCHMITT 0} {SLEW slow} {USAGE Reserved}}\
     PS_MIO21 {{AUX_IO 0} {DIRECTION in} {DRIVE_STRENGTH 8mA} {OUTPUT_DATA default}\
{PULL disable} {SCHMITT 0} {SLEW slow} {USAGE Reserved}}\
     PS_MIO7 {{AUX_IO 0} {DIRECTION in} {DRIVE_STRENGTH 8mA} {OUTPUT_DATA default}\
{PULL disable} {SCHMITT 0} {SLEW slow} {USAGE Reserved}}\
     PS_MIO9 {{AUX_IO 0} {DIRECTION in} {DRIVE_STRENGTH 8mA} {OUTPUT_DATA default}\
{PULL disable} {SCHMITT 0} {SLEW slow} {USAGE Reserved}}\
     PS_NUM_FABRIC_RESETS {0}\
     PS_PCIE_EP_RESET1_IO {PMC_MIO 38}\
     PS_PCIE_EP_RESET2_IO {PMC_MIO 39}\
     PS_PCIE_RESET {{ENABLE 1}}\
     PS_UART0_PERIPHERAL {{ENABLE 1} {IO {PMC_MIO 42 .. 43}}}\
     PS_USB3_PERIPHERAL {{ENABLE 1} {IO {PMC_MIO 13 .. 25}}}\
     PS_USE_PMCPL_CLK0 {0}\
     PS_USE_PMCPL_CLK1 {0}\
     PS_USE_PMCPL_CLK2 {0}\
     PS_USE_PMCPL_CLK3 {0}\
     SMON_ALARMS {Set_Alarms_On}\
     SMON_ENABLE_TEMP_AVERAGING {0}\
     SMON_TEMP_AVERAGING_SAMPLES {0}\
   } \
   CONFIG.PS_PMC_CONFIG_APPLIED {1} \
 ] $versal_cips_0

  # Create instance: xlconstant_1, and set properties
  set xlconstant_1 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlconstant:1.1 xlconstant_1 ]

  # Create instance: xlconstant_01, and set properties
  set xlconstant_01 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlconstant:1.1 xlconstant_01 ]
  set_property -dict [ list \
   CONFIG.CONST_WIDTH {2} \
 ] $xlconstant_01

  # Create interface connections
  connect_bd_intf_net -intf_net pcie_cfg_ext_1 [get_bd_intf_pins pcie_versal_upstream/pcie_cfg_ext] [get_bd_intf_pins pcie_virtual_bridge_wrapper/pcie_cfg_ext]
  connect_bd_intf_net -intf_net pcie_refclk_1 [get_bd_intf_ports pcie_upstream_refclk] [get_bd_intf_pins pcie_versal_upstream_support/pcie_refclk]
  connect_bd_intf_net -intf_net pcie_refclk_2 [get_bd_intf_ports pcie_downstream_refclk] [get_bd_intf_pins pcie_versal_downstream_support/pcie_refclk]
  connect_bd_intf_net -intf_net pcie_versal_downstream_m_axis_cq [get_bd_intf_pins pcie_versal_downstream/m_axis_cq] [get_bd_intf_pins pcie_virtual_bridge_wrapper/s_axis_down_cq]
  connect_bd_intf_net -intf_net pcie_versal_downstream_m_axis_rc [get_bd_intf_pins pcie_versal_downstream/m_axis_rc] [get_bd_intf_pins pcie_virtual_bridge_wrapper/s_axis_down_rc]
  connect_bd_intf_net -intf_net pcie_versal_downstream_phy_mac_rx [get_bd_intf_pins pcie_versal_downstream/phy_mac_rx] [get_bd_intf_pins pcie_versal_downstream_support/phy_mac_rx]
  connect_bd_intf_net -intf_net pcie_versal_downstream_phy_mac_tx [get_bd_intf_pins pcie_versal_downstream/phy_mac_tx] [get_bd_intf_pins pcie_versal_downstream_support/phy_mac_tx]
  connect_bd_intf_net -intf_net pcie_versal_downstream_support_pcie_mgt [get_bd_intf_ports pcie_downstream_mgt] [get_bd_intf_pins pcie_versal_downstream_support/pcie_mgt]
  connect_bd_intf_net -intf_net pcie_versal_downstream_support_phy_mac_command [get_bd_intf_pins pcie_versal_downstream/phy_mac_command] [get_bd_intf_pins pcie_versal_downstream_support/phy_mac_command]
  connect_bd_intf_net -intf_net pcie_versal_downstream_support_phy_mac_rx_margining [get_bd_intf_pins pcie_versal_downstream/phy_mac_rx_margining] [get_bd_intf_pins pcie_versal_downstream_support/phy_mac_rx_margining]
  connect_bd_intf_net -intf_net pcie_versal_downstream_support_phy_mac_status [get_bd_intf_pins pcie_versal_downstream/phy_mac_status] [get_bd_intf_pins pcie_versal_downstream_support/phy_mac_status]
  connect_bd_intf_net -intf_net pcie_versal_downstream_support_phy_mac_tx_drive [get_bd_intf_pins pcie_versal_downstream/phy_mac_tx_drive] [get_bd_intf_pins pcie_versal_downstream_support/phy_mac_tx_drive]
  connect_bd_intf_net -intf_net pcie_versal_downstream_support_phy_mac_tx_eq [get_bd_intf_pins pcie_versal_downstream/phy_mac_tx_eq] [get_bd_intf_pins pcie_versal_downstream_support/phy_mac_tx_eq]
  connect_bd_intf_net -intf_net pcie_versal_upstream_m_axis_cq [get_bd_intf_pins pcie_versal_upstream/m_axis_cq] [get_bd_intf_pins pcie_virtual_bridge_wrapper/s_axis_up_cq]
  connect_bd_intf_net -intf_net pcie_versal_upstream_m_axis_rc [get_bd_intf_pins pcie_versal_upstream/m_axis_rc] [get_bd_intf_pins pcie_virtual_bridge_wrapper/s_axis_up_rc]
  connect_bd_intf_net -intf_net pcie_versal_upstream_phy_mac_rx [get_bd_intf_pins pcie_versal_upstream/phy_mac_rx] [get_bd_intf_pins pcie_versal_upstream_support/phy_mac_rx]
  connect_bd_intf_net -intf_net pcie_versal_upstream_phy_mac_tx [get_bd_intf_pins pcie_versal_upstream/phy_mac_tx] [get_bd_intf_pins pcie_versal_upstream_support/phy_mac_tx]
  connect_bd_intf_net -intf_net pcie_versal_upstream_support_pcie_mgt [get_bd_intf_ports pcie_upstream_mgt] [get_bd_intf_pins pcie_versal_upstream_support/pcie_mgt]
  connect_bd_intf_net -intf_net pcie_versal_upstream_support_phy_mac_command [get_bd_intf_pins pcie_versal_upstream/phy_mac_command] [get_bd_intf_pins pcie_versal_upstream_support/phy_mac_command]
  connect_bd_intf_net -intf_net pcie_versal_upstream_support_phy_mac_rx_margining [get_bd_intf_pins pcie_versal_upstream/phy_mac_rx_margining] [get_bd_intf_pins pcie_versal_upstream_support/phy_mac_rx_margining]
  connect_bd_intf_net -intf_net pcie_versal_upstream_support_phy_mac_status [get_bd_intf_pins pcie_versal_upstream/phy_mac_status] [get_bd_intf_pins pcie_versal_upstream_support/phy_mac_status]
  connect_bd_intf_net -intf_net pcie_versal_upstream_support_phy_mac_tx_drive [get_bd_intf_pins pcie_versal_upstream/phy_mac_tx_drive] [get_bd_intf_pins pcie_versal_upstream_support/phy_mac_tx_drive]
  connect_bd_intf_net -intf_net pcie_versal_upstream_support_phy_mac_tx_eq [get_bd_intf_pins pcie_versal_upstream/phy_mac_tx_eq] [get_bd_intf_pins pcie_versal_upstream_support/phy_mac_tx_eq]
  connect_bd_intf_net -intf_net pcie_virtual_bridge_wrapper_m_axis_down_cc [get_bd_intf_pins pcie_versal_downstream/s_axis_cc] [get_bd_intf_pins pcie_virtual_bridge_wrapper/m_axis_down_cc]
  connect_bd_intf_net -intf_net pcie_virtual_bridge_wrapper_m_axis_down_rq [get_bd_intf_pins pcie_versal_downstream/s_axis_rq] [get_bd_intf_pins pcie_virtual_bridge_wrapper/m_axis_down_rq]
  connect_bd_intf_net -intf_net pcie_virtual_bridge_wrapper_m_axis_up_cc [get_bd_intf_pins pcie_versal_upstream/s_axis_cc] [get_bd_intf_pins pcie_virtual_bridge_wrapper/m_axis_up_cc]
  connect_bd_intf_net -intf_net pcie_virtual_bridge_wrapper_m_axis_up_rq [get_bd_intf_pins pcie_versal_upstream/s_axis_rq] [get_bd_intf_pins pcie_virtual_bridge_wrapper/m_axis_up_rq]
  connect_bd_intf_net -intf_net pcie_virtual_bridge_wrapper_pcie_cfg_mgmt [get_bd_intf_pins pcie_versal_downstream/pcie_cfg_mgmt] [get_bd_intf_pins pcie_virtual_bridge_wrapper/pcie_cfg_mgmt]

  # Create port connections
  connect_bd_net -net Net [get_bd_pins pcie_versal_downstream/cfg_config_space_enable] [get_bd_pins pcie_versal_downstream/cfg_link_training_enable] [get_bd_pins pcie_versal_downstream/cfg_pm_aspm_tx_l0s_entry_disable] [get_bd_pins pcie_versal_downstream/cfg_power_state_change_ack] [get_bd_pins pcie_versal_upstream/cfg_config_space_enable] [get_bd_pins pcie_versal_upstream/cfg_link_training_enable] [get_bd_pins pcie_versal_upstream/cfg_pm_aspm_tx_l0s_entry_disable] [get_bd_pins pcie_versal_upstream/cfg_power_state_change_ack] [get_bd_pins xlconstant_1/dout]
  connect_bd_net -net cfg_flr_done_downstream_cfg_flr_done [get_bd_pins cfg_flr_done_downstream/cfg_flr_done] [get_bd_pins pcie_versal_downstream/cfg_flr_done]
  connect_bd_net -net cfg_flr_done_upstream_cfg_flr_done [get_bd_pins cfg_flr_done_upstream/cfg_flr_done] [get_bd_pins pcie_versal_upstream/cfg_flr_done]
  connect_bd_net -net pcie_versal_downstream_cfg_flr_in_process [get_bd_pins cfg_flr_done_downstream/cfg_flr_in_process] [get_bd_pins pcie_versal_downstream/cfg_flr_in_process]
  connect_bd_net -net pcie_versal_downstream_pcie_ltssm_state [get_bd_pins pcie_versal_downstream/pcie_ltssm_state] [get_bd_pins pcie_versal_downstream_support/pcie_ltssm_state]
  connect_bd_net -net pcie_versal_downstream_support_BUFG_GT_O [get_bd_pins pcie_versal_downstream/sys_clk] [get_bd_pins pcie_versal_downstream_support/BUFG_GT_O]
  connect_bd_net -net pcie_versal_downstream_support_IBUF_OUT [get_bd_pins pcie_versal_downstream/sys_clk_gt] [get_bd_pins pcie_versal_downstream_support/IBUF_OUT]
  connect_bd_net -net pcie_versal_downstream_support_phy_coreclk [get_bd_pins pcie_versal_downstream/phy_coreclk] [get_bd_pins pcie_versal_downstream_support/phy_coreclk]
  connect_bd_net -net pcie_versal_downstream_support_phy_mcapclk [get_bd_pins pcie_versal_downstream/phy_mcapclk] [get_bd_pins pcie_versal_downstream_support/phy_mcapclk]
  connect_bd_net -net pcie_versal_downstream_support_phy_pclk [get_bd_pins pcie_versal_downstream/phy_pclk] [get_bd_pins pcie_versal_downstream_support/phy_pclk]
  connect_bd_net -net pcie_versal_downstream_support_phy_userclk [get_bd_pins pcie_versal_downstream/phy_userclk] [get_bd_pins pcie_versal_downstream_support/phy_userclk]
  connect_bd_net -net pcie_versal_downstream_support_phy_userclk2 [get_bd_pins pcie_versal_downstream/phy_userclk2] [get_bd_pins pcie_versal_downstream_support/phy_userclk2]
  connect_bd_net -net pcie_versal_downstream_user_clk [get_bd_pins cfg_flr_done_downstream/user_clk] [get_bd_pins pcie_versal_downstream/user_clk] [get_bd_pins pcie_virtual_bridge_wrapper/down_aclk]
  connect_bd_net -net pcie_versal_downstream_user_reset [get_bd_pins cfg_flr_done_downstream/user_reset] [get_bd_pins pcie_versal_downstream/user_reset] [get_bd_pins util_vector_logic_downstream_reset/Op1]
  connect_bd_net -net pcie_versal_upstream_cfg_flr_in_process [get_bd_pins cfg_flr_done_upstream/cfg_flr_in_process] [get_bd_pins pcie_versal_upstream/cfg_flr_in_process]
  connect_bd_net -net pcie_versal_upstream_pcie_ltssm_state [get_bd_pins pcie_versal_upstream/pcie_ltssm_state] [get_bd_pins pcie_versal_upstream_support/pcie_ltssm_state]
  connect_bd_net -net pcie_versal_upstream_support_BUFG_GT_O [get_bd_pins pcie_versal_upstream/sys_clk] [get_bd_pins pcie_versal_upstream_support/BUFG_GT_O]
  connect_bd_net -net pcie_versal_upstream_support_IBUF_OUT [get_bd_pins pcie_versal_upstream/sys_clk_gt] [get_bd_pins pcie_versal_upstream_support/IBUF_OUT]
  connect_bd_net -net pcie_versal_upstream_support_phy_coreclk [get_bd_pins pcie_versal_upstream/phy_coreclk] [get_bd_pins pcie_versal_upstream_support/phy_coreclk]
  connect_bd_net -net pcie_versal_upstream_support_phy_mcapclk [get_bd_pins pcie_versal_upstream/phy_mcapclk] [get_bd_pins pcie_versal_upstream_support/phy_mcapclk]
  connect_bd_net -net pcie_versal_upstream_support_phy_pclk [get_bd_pins pcie_versal_upstream/phy_pclk] [get_bd_pins pcie_versal_upstream_support/phy_pclk]
  connect_bd_net -net pcie_versal_upstream_support_phy_userclk [get_bd_pins pcie_versal_upstream/phy_userclk] [get_bd_pins pcie_versal_upstream_support/phy_userclk]
  connect_bd_net -net pcie_versal_upstream_support_phy_userclk2 [get_bd_pins pcie_versal_upstream/phy_userclk2] [get_bd_pins pcie_versal_upstream_support/phy_userclk2]
  connect_bd_net -net pcie_versal_upstream_user_clk [get_bd_pins cfg_flr_done_upstream/user_clk] [get_bd_pins pcie_versal_upstream/user_clk] [get_bd_pins pcie_virtual_bridge_wrapper/up_aclk]
  connect_bd_net -net pcie_versal_upstream_user_reset [get_bd_pins cfg_flr_done_upstream/user_reset] [get_bd_pins pcie_versal_upstream/user_reset] [get_bd_pins util_vector_logic_upstream_reset/Op1]
  connect_bd_net -net sys_reset_1 [get_bd_ports sys_reset] [get_bd_pins util_vector_logic_sys_reset/Op1]
  connect_bd_net -net util_vector_logic_downstream_reset_Res [get_bd_pins pcie_virtual_bridge_wrapper/down_aresetn] [get_bd_pins util_vector_logic_downstream_reset/Res]
  connect_bd_net -net util_vector_logic_sys_reset_Res [get_bd_pins pcie_versal_downstream/sys_reset] [get_bd_pins pcie_versal_downstream_support/sys_reset] [get_bd_pins pcie_versal_upstream/sys_reset] [get_bd_pins pcie_versal_upstream_support/sys_reset] [get_bd_pins util_vector_logic_sys_reset/Res]
  connect_bd_net -net util_vector_logic_upstream_reset_Res [get_bd_pins pcie_virtual_bridge_wrapper/up_aresetn] [get_bd_pins util_vector_logic_upstream_reset/Res]
  connect_bd_net -net xlconstant_01_dout [get_bd_pins pcie_versal_downstream/pcie_cq_np_req] [get_bd_pins pcie_versal_upstream/pcie_cq_np_req] [get_bd_pins xlconstant_01/dout]

  # Create address segments

  # Perform GUI Layout
  regenerate_bd_layout -layout_string {
   "ActiveEmotionalView":"Default View",
   "Default View_ScaleFactor":"1.23888",
   "Default View_TopLeft":"739,279",
   "ExpandedHierarchyInLayout":"",
   "guistr":"# # String gsaved with Nlview 7.0r4  2019-12-20 bk=1.5203 VDI=41 GEI=36 GUI=JA:10.0 TLS
#  -string -flagsOSRD
preplace port pcie_upstream_refclk -pg 1 -lvl 0 -x 0 -y 220 -defaultsOSRD
preplace port pcie_upstream_mgt -pg 1 -lvl 6 -x 3500 -y 740 -defaultsOSRD
preplace port pcie_downstream_refclk -pg 1 -lvl 0 -x 0 -y 240 -defaultsOSRD
preplace port pcie_downstream_mgt -pg 1 -lvl 6 -x 3500 -y 410 -defaultsOSRD
preplace port port-id_sys_reset -pg 1 -lvl 0 -x 0 -y 690 -defaultsOSRD
preplace inst pcie_versal_upstream -pg 1 -lvl 3 -x 1850 -y 570 -defaultsOSRD
preplace inst pcie_versal_upstream_support -pg 1 -lvl 4 -x 2640 -y 760 -defaultsOSRD
preplace inst pcie_versal_downstream -pg 1 -lvl 3 -x 1850 -y 1580 -defaultsOSRD
preplace inst pcie_versal_downstream_support -pg 1 -lvl 4 -x 2640 -y 430 -defaultsOSRD
preplace inst xlconstant_1 -pg 1 -lvl 2 -x 900 -y 530 -defaultsOSRD
preplace inst versal_cips_0 -pg 1 -lvl 1 -x 430 -y 80 -defaultsOSRD
preplace inst pcie_virtual_bridge_wrapper -pg 1 -lvl 5 -x 3280 -y 1200 -defaultsOSRD
preplace inst util_vector_logic_upstream_reset -pg 1 -lvl 4 -x 2640 -y 1250 -defaultsOSRD
preplace inst util_vector_logic_downstream_reset -pg 1 -lvl 4 -x 2640 -y 1360 -defaultsOSRD -resize 260 88
preplace inst util_vector_logic_sys_reset -pg 1 -lvl 1 -x 430 -y 690 -defaultsOSRD -resize 260 88
preplace inst xlconstant_01 -pg 1 -lvl 2 -x 900 -y 790 -defaultsOSRD
preplace inst cfg_flr_done_upstream -pg 1 -lvl 3 -x 1850 -y 1070 -defaultsOSRD
preplace inst cfg_flr_done_downstream -pg 1 -lvl 3 -x 1850 -y 2010 -defaultsOSRD -resize 340 116
preplace netloc Net 1 2 1 1020 530n
preplace netloc pcie_versal_downstream_pcie_ltssm_state 1 3 1 2230 450n
preplace netloc pcie_versal_downstream_support_BUFG_GT_O 1 2 3 1160 1890 NJ 1890 2990
preplace netloc pcie_versal_downstream_support_IBUF_OUT 1 2 3 1180 1880 NJ 1880 2980
preplace netloc pcie_versal_downstream_support_phy_coreclk 1 2 3 1190 1900 NJ 1900 3050
preplace netloc pcie_versal_downstream_support_phy_mcapclk 1 2 3 1200 1910 NJ 1910 3040
preplace netloc pcie_versal_downstream_support_phy_pclk 1 2 3 1150 1920 NJ 1920 3030
preplace netloc pcie_versal_downstream_support_phy_userclk 1 2 3 1140 2090 NJ 2090 3060
preplace netloc pcie_versal_downstream_support_phy_userclk2 1 2 3 1170 1930 NJ 1930 3010
preplace netloc pcie_versal_downstream_user_clk 1 2 3 1190 2110 2290 1190 3090
preplace netloc pcie_versal_downstream_user_reset 1 2 2 1200 2120 2300
preplace netloc pcie_versal_upstream_pcie_ltssm_state 1 3 1 2170 710n
preplace netloc pcie_versal_upstream_support_BUFG_GT_O 1 2 3 1200 920 2140J 1000 2840
preplace netloc pcie_versal_upstream_support_IBUF_OUT 1 2 3 1140 1160 2140J 1040 2830
preplace netloc pcie_versal_upstream_support_phy_coreclk 1 2 3 1120 1190 2220J 1140 2930
preplace netloc pcie_versal_upstream_support_phy_mcapclk 1 2 3 1160 1200 2150J 1050 2870
preplace netloc pcie_versal_upstream_support_phy_pclk 1 2 3 1050 1210 2170J 1060 2860
preplace netloc pcie_versal_upstream_support_phy_userclk 1 2 3 1150 1180 2180J 1110 2920
preplace netloc pcie_versal_upstream_support_phy_userclk2 1 2 3 1180 1170 2110J 1100 2850
preplace netloc pcie_versal_upstream_user_clk 1 2 3 1190 1220 2130 1170 3100
preplace netloc pcie_versal_upstream_user_reset 1 2 2 1200 1230 2160
preplace netloc sys_reset_1 1 0 1 N 690
preplace netloc util_vector_logic_downstream_reset_Res 1 4 1 3120 1280n
preplace netloc util_vector_logic_sys_reset_Res 1 1 3 700 710 1030J 870 2150
preplace netloc util_vector_logic_upstream_reset_Res 1 4 1 3120 1220n
preplace netloc xlconstant_01_dout 1 2 2 1010J 880 2090
preplace netloc pcie_versal_downstream_cfg_flr_in_process 1 2 1 1130 1600n
preplace netloc cfg_flr_done_downstream_cfg_flr_done 1 2 2 1120 2100 2090
preplace netloc pcie_versal_upstream_cfg_flr_in_process 1 2 1 1130 590n
preplace netloc cfg_flr_done_upstream_cfg_flr_done 1 2 2 1160 270 2100
preplace netloc pcie_cfg_ext_1 1 3 2 2140 240 3110
preplace netloc pcie_refclk_1 1 0 4 NJ 220 N 220 1030 250 2110J
preplace netloc pcie_refclk_2 1 0 4 NJ 240 N 240 1020 260 2210J
preplace netloc pcie_versal_downstream_m_axis_cq 1 3 2 2280 1180 N
preplace netloc pcie_versal_downstream_m_axis_rc 1 3 2 2270 1160 N
preplace netloc pcie_versal_downstream_phy_mac_rx 1 3 1 2190 390n
preplace netloc pcie_versal_downstream_phy_mac_tx 1 3 1 2200 410n
preplace netloc pcie_versal_downstream_support_pcie_mgt 1 4 2 N 410 N
preplace netloc pcie_versal_downstream_support_phy_mac_command 1 2 3 1180 1240 2250J 1120 3020
preplace netloc pcie_versal_downstream_support_phy_mac_rx_margining 1 2 3 1040 930 NJ 930 2960
preplace netloc pcie_versal_downstream_support_phy_mac_status 1 2 3 1060 940 NJ 940 2950
preplace netloc pcie_versal_downstream_support_phy_mac_tx_drive 1 2 3 1070 950 NJ 950 2940
preplace netloc pcie_versal_downstream_support_phy_mac_tx_eq 1 2 3 1160 1250 2120J 1130 3000
preplace netloc pcie_versal_upstream_m_axis_cq 1 3 2 2130 250 3100
preplace netloc pcie_versal_upstream_m_axis_rc 1 3 2 2120 230 3120
preplace netloc pcie_versal_upstream_phy_mac_rx 1 3 1 2120 470n
preplace netloc pcie_versal_upstream_phy_mac_tx 1 3 1 2210 450n
preplace netloc pcie_versal_upstream_support_pcie_mgt 1 4 2 N 740 N
preplace netloc pcie_versal_upstream_support_phy_mac_command 1 2 3 1110 960 NJ 960 2910
preplace netloc pcie_versal_upstream_support_phy_mac_rx_margining 1 2 3 1170 970 NJ 970 2900
preplace netloc pcie_versal_upstream_support_phy_mac_status 1 2 3 1090 980 NJ 980 2890
preplace netloc pcie_versal_upstream_support_phy_mac_tx_drive 1 2 3 1100 990 NJ 990 2880
preplace netloc pcie_versal_upstream_support_phy_mac_tx_eq 1 2 3 1080 1150 NJ 1150 2970
preplace netloc pcie_virtual_bridge_wrapper_m_axis_down_cc 1 2 4 1190 1260 2210 1070 3070 1040 3470
preplace netloc pcie_virtual_bridge_wrapper_m_axis_down_rq 1 2 4 1200 1270 2240 1080 3080 1050 3440
preplace netloc pcie_virtual_bridge_wrapper_m_axis_up_cc 1 2 4 1080 210 N 210 N 210 3480
preplace netloc pcie_virtual_bridge_wrapper_m_axis_up_rq 1 2 4 1090 220 N 220 N 220 3450
preplace netloc pcie_virtual_bridge_wrapper_pcie_cfg_mgmt 1 2 4 1170 1280 2260 1090 3090 1060 3460
levelinfo -pg 1 0 430 900 1850 2640 3280 3500
pagesize -pg 1 -db -bbox -sgen -230 -10 3720 2590
"
}

  # Restore current instance
  current_bd_instance $oldCurInst

  validate_bd_design
  save_bd_design
  close_bd_design $design_name 
}
# End of cr_bd_versal_pcie_switch()
cr_bd_versal_pcie_switch ""
set_property REGISTERED_WITH_MANAGER "1" [get_files versal_pcie_switch.bd ] 
set_property SYNTH_CHECKPOINT_MODE "Hierarchical" [get_files versal_pcie_switch.bd ] 

#call make_wrapper to create wrapper files
if { [get_property IS_LOCKED [ get_files -norecurse versal_pcie_switch.bd] ] == 1  } {
  import_files -fileset sources_1 [file normalize "${origin_dir}/versal_pcie_switch/versal_pcie_switch.gen/sources_1/bd/versal_pcie_switch/hdl/versal_pcie_switch_wrapper.v" ]
} else {
  set wrapper_path [make_wrapper -fileset sources_1 -files [ get_files -norecurse versal_pcie_switch.bd] -top]
  add_files -norecurse -fileset sources_1 $wrapper_path
}


set idrFlowPropertiesConstraints ""
catch {
 set idrFlowPropertiesConstraints [get_param runs.disableIDRFlowPropertyConstraints]
 set_param runs.disableIDRFlowPropertyConstraints 1
}

# Create 'synth_1' run (if not found)
if {[string equal [get_runs -quiet synth_1] ""]} {
    create_run -name synth_1 -part xcvc1902-vsva2197-2MP-e-S-es1 -flow {Vivado Synthesis 2021} -strategy "Vivado Synthesis Defaults" -report_strategy {No Reports} -constrset constrs_1
} else {
  set_property strategy "Vivado Synthesis Defaults" [get_runs synth_1]
  set_property flow "Vivado Synthesis 2021" [get_runs synth_1]
}
set obj [get_runs synth_1]
set_property set_report_strategy_name 1 $obj
set_property report_strategy {Vivado Synthesis Default Reports} $obj
set_property set_report_strategy_name 0 $obj
# Create 'synth_1_synth_report_utilization_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs synth_1] synth_1_synth_report_utilization_0] "" ] } {
  create_report_config -report_name synth_1_synth_report_utilization_0 -report_type report_utilization:1.0 -steps synth_design -runs synth_1
}
set obj [get_report_configs -of_objects [get_runs synth_1] synth_1_synth_report_utilization_0]
if { $obj != "" } {

}
set obj [get_runs synth_1]
set_property -name "auto_incremental_checkpoint" -value "1" -objects $obj
set_property -name "strategy" -value "Vivado Synthesis Defaults" -objects $obj

# set the current synth run
current_run -synthesis [get_runs synth_1]

# Create 'impl_1' run (if not found)
if {[string equal [get_runs -quiet impl_1] ""]} {
    create_run -name impl_1 -part xcvc1902-vsva2197-2MP-e-S-es1 -flow {Vivado Implementation 2021} -strategy "Vivado Implementation Defaults" -report_strategy {No Reports} -constrset constrs_1 -parent_run synth_1
} else {
  set_property strategy "Vivado Implementation Defaults" [get_runs impl_1]
  set_property flow "Vivado Implementation 2021" [get_runs impl_1]
}
set obj [get_runs impl_1]
set_property set_report_strategy_name 1 $obj
set_property report_strategy {Vivado Implementation Default Reports} $obj
set_property set_report_strategy_name 0 $obj
# Create 'impl_1_init_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_init_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_init_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps init_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_init_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj
set_property -name "options.report_unconstrained" -value "1" -objects $obj

}
# Create 'impl_1_opt_report_drc_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_opt_report_drc_0] "" ] } {
  create_report_config -report_name impl_1_opt_report_drc_0 -report_type report_drc:1.0 -steps opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_opt_report_drc_0]
if { $obj != "" } {

}
# Create 'impl_1_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj
set_property -name "options.report_unconstrained" -value "1" -objects $obj

}
# Create 'impl_1_power_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_power_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_power_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps power_opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_power_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj
set_property -name "options.report_unconstrained" -value "1" -objects $obj

}
# Create 'impl_1_place_report_io_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_io_0] "" ] } {
  create_report_config -report_name impl_1_place_report_io_0 -report_type report_io:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_io_0]
if { $obj != "" } {

}
# Create 'impl_1_place_report_utilization_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_utilization_0] "" ] } {
  create_report_config -report_name impl_1_place_report_utilization_0 -report_type report_utilization:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_utilization_0]
if { $obj != "" } {

}
# Create 'impl_1_place_report_control_sets_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_control_sets_0] "" ] } {
  create_report_config -report_name impl_1_place_report_control_sets_0 -report_type report_control_sets:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_control_sets_0]
if { $obj != "" } {
set_property -name "options.verbose" -value "1" -objects $obj

}
# Create 'impl_1_place_report_incremental_reuse_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_incremental_reuse_0] "" ] } {
  create_report_config -report_name impl_1_place_report_incremental_reuse_0 -report_type report_incremental_reuse:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_incremental_reuse_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj

}
# Create 'impl_1_place_report_incremental_reuse_1' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_incremental_reuse_1] "" ] } {
  create_report_config -report_name impl_1_place_report_incremental_reuse_1 -report_type report_incremental_reuse:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_incremental_reuse_1]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj

}
# Create 'impl_1_place_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_place_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj
set_property -name "options.report_unconstrained" -value "1" -objects $obj

}
# Create 'impl_1_post_place_power_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_post_place_power_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_post_place_power_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps post_place_power_opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_post_place_power_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj
set_property -name "options.report_unconstrained" -value "1" -objects $obj

}
# Create 'impl_1_phys_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_phys_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_phys_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps phys_opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_phys_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj
set_property -name "options.report_unconstrained" -value "1" -objects $obj

}
# Create 'impl_1_route_report_drc_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_drc_0] "" ] } {
  create_report_config -report_name impl_1_route_report_drc_0 -report_type report_drc:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_drc_0]
if { $obj != "" } {

}
# Create 'impl_1_route_report_methodology_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_methodology_0] "" ] } {
  create_report_config -report_name impl_1_route_report_methodology_0 -report_type report_methodology:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_methodology_0]
if { $obj != "" } {

}
# Create 'impl_1_route_report_power_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_power_0] "" ] } {
  create_report_config -report_name impl_1_route_report_power_0 -report_type report_power:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_power_0]
if { $obj != "" } {

}
# Create 'impl_1_route_report_route_status_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_route_status_0] "" ] } {
  create_report_config -report_name impl_1_route_report_route_status_0 -report_type report_route_status:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_route_status_0]
if { $obj != "" } {

}
# Create 'impl_1_route_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_route_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_timing_summary_0]
if { $obj != "" } {
set_property -name "options.max_paths" -value "10" -objects $obj
set_property -name "options.report_unconstrained" -value "1" -objects $obj

}
# Create 'impl_1_route_report_incremental_reuse_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_incremental_reuse_0] "" ] } {
  create_report_config -report_name impl_1_route_report_incremental_reuse_0 -report_type report_incremental_reuse:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_incremental_reuse_0]
if { $obj != "" } {

}
# Create 'impl_1_route_report_clock_utilization_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_clock_utilization_0] "" ] } {
  create_report_config -report_name impl_1_route_report_clock_utilization_0 -report_type report_clock_utilization:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_clock_utilization_0]
if { $obj != "" } {

}
# Create 'impl_1_route_report_bus_skew_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_bus_skew_0] "" ] } {
  create_report_config -report_name impl_1_route_report_bus_skew_0 -report_type report_bus_skew:1.1 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_bus_skew_0]
if { $obj != "" } {
set_property -name "options.warn_on_violation" -value "1" -objects $obj

}
# Create 'impl_1_post_route_phys_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_post_route_phys_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_post_route_phys_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps post_route_phys_opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_post_route_phys_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "options.max_paths" -value "10" -objects $obj
set_property -name "options.report_unconstrained" -value "1" -objects $obj
set_property -name "options.warn_on_violation" -value "1" -objects $obj

}
# Create 'impl_1_post_route_phys_opt_report_bus_skew_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_post_route_phys_opt_report_bus_skew_0] "" ] } {
  create_report_config -report_name impl_1_post_route_phys_opt_report_bus_skew_0 -report_type report_bus_skew:1.1 -steps post_route_phys_opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_post_route_phys_opt_report_bus_skew_0]
if { $obj != "" } {
set_property -name "options.warn_on_violation" -value "1" -objects $obj

}
set obj [get_runs impl_1]
set_property -name "strategy" -value "Vivado Implementation Defaults" -objects $obj
set_property -name "steps.write_device_image.args.readback_file" -value "0" -objects $obj
set_property -name "steps.write_device_image.args.verbose" -value "0" -objects $obj

# set the current impl run
current_run -implementation [get_runs impl_1]
catch {
 if { $idrFlowPropertiesConstraints != {} } {
   set_param runs.disableIDRFlowPropertyConstraints $idrFlowPropertiesConstraints
 }
}

puts "INFO: Project created:${_xil_proj_name_}"
# Create 'drc_1' gadget (if not found)
if {[string equal [get_dashboard_gadgets  [ list "drc_1" ] ] ""]} {
create_dashboard_gadget -name {drc_1} -type drc
}
set obj [get_dashboard_gadgets [ list "drc_1" ] ]
set_property -name "reports" -value "impl_1#impl_1_route_report_drc_0" -objects $obj

# Create 'methodology_1' gadget (if not found)
if {[string equal [get_dashboard_gadgets  [ list "methodology_1" ] ] ""]} {
create_dashboard_gadget -name {methodology_1} -type methodology
}
set obj [get_dashboard_gadgets [ list "methodology_1" ] ]
set_property -name "reports" -value "impl_1#impl_1_route_report_methodology_0" -objects $obj

# Create 'power_1' gadget (if not found)
if {[string equal [get_dashboard_gadgets  [ list "power_1" ] ] ""]} {
create_dashboard_gadget -name {power_1} -type power
}
set obj [get_dashboard_gadgets [ list "power_1" ] ]
set_property -name "reports" -value "impl_1#impl_1_route_report_power_0" -objects $obj

# Create 'timing_1' gadget (if not found)
if {[string equal [get_dashboard_gadgets  [ list "timing_1" ] ] ""]} {
create_dashboard_gadget -name {timing_1} -type timing
}
set obj [get_dashboard_gadgets [ list "timing_1" ] ]
set_property -name "reports" -value "impl_1#impl_1_route_report_timing_summary_0" -objects $obj

# Create 'utilization_1' gadget (if not found)
if {[string equal [get_dashboard_gadgets  [ list "utilization_1" ] ] ""]} {
create_dashboard_gadget -name {utilization_1} -type utilization
}
set obj [get_dashboard_gadgets [ list "utilization_1" ] ]
set_property -name "reports" -value "synth_1#synth_1_synth_report_utilization_0" -objects $obj
set_property -name "run.step" -value "synth_design" -objects $obj
set_property -name "run.type" -value "synthesis" -objects $obj

# Create 'utilization_2' gadget (if not found)
if {[string equal [get_dashboard_gadgets  [ list "utilization_2" ] ] ""]} {
create_dashboard_gadget -name {utilization_2} -type utilization
}
set obj [get_dashboard_gadgets [ list "utilization_2" ] ]
set_property -name "reports" -value "impl_1#impl_1_place_report_utilization_0" -objects $obj

move_dashboard_gadget -name {utilization_1} -row 0 -col 0
move_dashboard_gadget -name {power_1} -row 1 -col 0
move_dashboard_gadget -name {drc_1} -row 2 -col 0
move_dashboard_gadget -name {timing_1} -row 0 -col 1
move_dashboard_gadget -name {utilization_2} -row 1 -col 1
move_dashboard_gadget -name {methodology_1} -row 2 -col 1
